// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go cloud.google.com/go/storage

package storage

import "time"

// PostPolicyV4Options are used to construct a signed post policy.
// Please see https://cloud.google.com/storage/docs/xml-api/post-object
// for reference about the fields.
#PostPolicyV4Options: {
	// GoogleAccessID represents the authorizer of the signed URL generation.
	// It is typically the Google service account client email address from
	// the Google Developers Console in the form of "xxx@developer.gserviceaccount.com".
	// Required.
	GoogleAccessID: string

	// PrivateKey is the Google service account private key. It is obtainable
	// from the Google Developers Console.
	// At https://console.developers.google.com/project/<your-project-id>/apiui/credential,
	// create a service account client ID or reuse one of your existing service account
	// credentials. Click on the "Generate new P12 key" to generate and download
	// a new private key. Once you download the P12 file, use the following command
	// to convert it into a PEM file.
	//
	//    $ openssl pkcs12 -in key.p12 -passin pass:notasecret -out key.pem -nodes
	//
	// Provide the contents of the PEM file as a byte slice.
	// Exactly one of PrivateKey or SignBytes must be non-nil.
	PrivateKey: bytes @go(,[]byte)

	// Expires is the expiration time on the signed URL.
	// It must be a time in the future.
	// Required.
	Expires: time.Time

	// Style provides options for the type of URL to use. Options are
	// PathStyle (default), BucketBoundHostname, and VirtualHostedStyle. See
	// https://cloud.google.com/storage/docs/request-endpoints for details.
	// Optional.
	Style: #URLStyle

	// Insecure when set indicates that the generated URL's scheme
	// will use "http" instead of "https" (default).
	// Optional.
	Insecure: bool

	// Fields specifies the attributes of a PostPolicyV4 request.
	// When Fields is non-nil, its attributes must match those that will
	// passed into field Conditions.
	// Optional.
	Fields?: null | #PolicyV4Fields @go(,*PolicyV4Fields)

	// The conditions that the uploaded file will be expected to conform to.
	// When used, the failure of an upload to satisfy a condition will result in
	// a 4XX status code, back with the message describing the problem.
	// Optional.
	Conditions: [...#PostPolicyV4Condition] @go(,[]PostPolicyV4Condition)
}

// PolicyV4Fields describes the attributes for a PostPolicyV4 request.
#PolicyV4Fields: {
	// ACL specifies the access control permissions for the object.
	// Optional.
	ACL: string

	// CacheControl specifies the caching directives for the object.
	// Optional.
	CacheControl: string

	// ContentType specifies the media type of the object.
	// Optional.
	ContentType: string

	// ContentDisposition specifies how the file will be served back to requesters.
	// Optional.
	ContentDisposition: string

	// ContentEncoding specifies the decompressive transcoding that the object.
	// This field is complementary to ContentType in that the file could be
	// compressed but ContentType specifies the file's original media type.
	// Optional.
	ContentEncoding: string

	// Metadata specifies custom metadata for the object.
	// If any key doesn't begin with "x-goog-meta-", an error will be returned.
	// Optional.
	Metadata: {[string]: string} @go(,map[string]string)

	// StatusCodeOnSuccess when set, specifies the status code that Cloud Storage
	// will serve back on successful upload of the object.
	// Optional.
	StatusCodeOnSuccess: int

	// RedirectToURLOnSuccess when set, specifies the URL that Cloud Storage
	// will serve back on successful upload of the object.
	// Optional.
	RedirectToURLOnSuccess: string
}

// PostPolicyV4 describes the URL and respective form fields for a generated PostPolicyV4 request.
#PostPolicyV4: {
	// URL is the generated URL that the file upload will be made to.
	URL: string

	// Fields specifies the generated key-values that the file uploader
	// must include in their multipart upload form.
	Fields: {[string]: string} @go(,map[string]string)
}

// PostPolicyV4Condition describes the constraints that the subsequent
// object upload's multipart form fields will be expected to conform to.
#PostPolicyV4Condition: _

_#startsWith: _

_#contentLengthRangeCondition: _

_#singleValueCondition: _

// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/Azure/go-autorest/autorest

package autorest

import (
	"time"
	"net/http"
	"crypto/tls"
)

// DefaultPollingDelay is a reasonable delay between polling requests.
#DefaultPollingDelay: time.#Duration & 60000000000

// DefaultPollingDuration is a reasonable total polling duration.
#DefaultPollingDuration: time.#Duration & 900000000000

// DefaultRetryAttempts is number of attempts for retry status codes (5xx).
#DefaultRetryAttempts: 3

// DefaultRetryDuration is the duration to wait between retries.
#DefaultRetryDuration: time.#Duration & 30000000000

_#requestFormat:  "HTTP Request Begin ===================================================\n%s\n===================================================== HTTP Request End\n" // `HTTP Request Begin
			// ===================================================
			// %s
			// ===================================================== HTTP
			// Request End
			// `
_#responseFormat: "HTTP Response Begin ===================================================\n%s\n===================================================== HTTP Response End\n" // `HTTP Response Begin
			// ===================================================
			// %s
			// ===================================================== HTTP
			// Response End
			// `

// Response serves as the base for all responses from generated clients. It provides access to the
// last http.Response.
#Response: {
}

// Client is the base for autorest generated clients. It provides default, "do nothing"
// implementations of an Authorizer, RequestInspector, and ResponseInspector. It also returns the
// standard, undecorated http.Client as a default Sender.
//
// Generated clients should also use Error (see NewError and NewErrorWithError) for errors and
// return responses that compose with Response.
//
// Most customization of generated clients is best achieved by supplying a custom Authorizer, custom
// RequestInspector, and / or custom ResponseInspector. Users may log requests, implement circuit
// breakers (see https://msdn.microsoft.com/en-us/library/dn589784.aspx) or otherwise influence
// sending the request by providing a decorated Sender.
#Client: {
	Authorizer: #Authorizer
	Sender:     #Sender

	// PollingDelay sets the polling frequency used in absence of a Retry-After HTTP header
	PollingDelay: time.#Duration

	// PollingDuration sets the maximum polling time after which an error is returned.
	// Setting this to zero will use the provided context to control the duration.
	PollingDuration: time.#Duration

	// RetryAttempts sets the total number of times the client will attempt to make an HTTP request.
	// Set the value to 1 to disable retries.  DO NOT set the value to less than 1.
	RetryAttempts: int

	// RetryDuration sets the delay duration for retries.
	RetryDuration: time.#Duration

	// UserAgent, if not empty, will be set as the HTTP User-Agent header on all requests sent
	// through the Do method.
	UserAgent: string
	Jar:       http.#CookieJar

	// Set to true to skip attempted registration of resource providers (false by default).
	SkipResourceProviderRegistration: bool
}

// ClientOptions contains various Client configuration options.
#ClientOptions: {
	// UserAgent is an optional user-agent string to append to the default user agent.
	UserAgent: string

	// Renegotiation is an optional setting to control client-side TLS renegotiation.
	Renegotiation: tls.#RenegotiationSupport
}

// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/Azure/azure-sdk-for-go/services/cosmos-db/mgmt/2015-04-08/documentdb

package documentdb

_#fqdn: "github.com/Azure/azure-sdk-for-go/services/cosmos-db/mgmt/2015-04-08/documentdb"

// Capability cosmos DB capability object
#Capability: {
	// Name - Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	name?: null | string @go(Name,*string)
}

// CassandraKeyspace an Azure Cosmos DB Cassandra keyspace.
#CassandraKeyspace: _

// CassandraKeyspaceCreateUpdateParameters parameters to create and update Cosmos DB Cassandra keyspace.
#CassandraKeyspaceCreateUpdateParameters: _

// CassandraKeyspaceCreateUpdateProperties properties to create and update Azure Cosmos DB Cassandra
// keyspace.
#CassandraKeyspaceCreateUpdateProperties: _

// CassandraKeyspaceListResult the List operation response, that contains the Cassandra keyspaces and their
// properties.
#CassandraKeyspaceListResult: _

// CassandraKeyspaceProperties the properties of an Azure Cosmos DB Cassandra keyspace
#CassandraKeyspaceProperties: {
	// ID - Name of the Cosmos DB Cassandra keyspace
	id?: null | string @go(ID,*string)
}

// CassandraKeyspaceResource cosmos DB Cassandra keyspace id object
#CassandraKeyspaceResource: {
	// ID - Name of the Cosmos DB Cassandra keyspace
	id?: null | string @go(ID,*string)
}

// CassandraPartitionKey cosmos DB Cassandra table partition key
#CassandraPartitionKey: {
	// Name - Name of the Cosmos DB Cassandra table partition key
	name?: null | string @go(Name,*string)
}

// CassandraSchema cosmos DB Cassandra table schema
#CassandraSchema: {
	// Columns - List of Cassandra table columns.
	columns?: null | [...#Column] @go(Columns,*[]Column)

	// PartitionKeys - List of partition key.
	partitionKeys?: null | [...#CassandraPartitionKey] @go(PartitionKeys,*[]CassandraPartitionKey)

	// ClusterKeys - List of cluster key.
	clusterKeys?: null | [...#ClusterKey] @go(ClusterKeys,*[]ClusterKey)
}

// CassandraTable an Azure Cosmos DB Cassandra table.
#CassandraTable: _

// CassandraTableCreateUpdateParameters parameters to create and update Cosmos DB Cassandra table.
#CassandraTableCreateUpdateParameters: _

// CassandraTableCreateUpdateProperties properties to create and update Azure Cosmos DB Cassandra table.
#CassandraTableCreateUpdateProperties: _

// CassandraTableListResult the List operation response, that contains the Cassandra tables and their
// properties.
#CassandraTableListResult: _

// CassandraTableProperties the properties of an Azure Cosmos DB Cassandra table
#CassandraTableProperties: {
	// ID - Name of the Cosmos DB Cassandra table
	id?: null | string @go(ID,*string)

	// DefaultTTL - Time to live of the Cosmos DB Cassandra table
	defaultTtl?: null | int32 @go(DefaultTTL,*int32)

	// Schema - Schema of the Cosmos DB Cassandra table
	schema?: null | #CassandraSchema @go(Schema,*CassandraSchema)
}

// CassandraTableResource cosmos DB Cassandra table id object
#CassandraTableResource: {
	// ID - Name of the Cosmos DB Cassandra table
	id?: null | string @go(ID,*string)

	// DefaultTTL - Time to live of the Cosmos DB Cassandra table
	defaultTtl?: null | int32 @go(DefaultTTL,*int32)

	// Schema - Schema of the Cosmos DB Cassandra table
	schema?: null | #CassandraSchema @go(Schema,*CassandraSchema)
}

// ClusterKey cosmos DB Cassandra table cluster key
#ClusterKey: {
	// Name - Name of the Cosmos DB Cassandra table cluster key
	name?: null | string @go(Name,*string)

	// OrderBy - Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	orderBy?: null | string @go(OrderBy,*string)
}

// Column cosmos DB Cassandra table column
#Column: {
	// Name - Name of the Cosmos DB Cassandra table column
	name?: null | string @go(Name,*string)

	// Type - Type of the Cosmos DB Cassandra table column
	type?: null | string @go(Type,*string)
}

// ConflictResolutionPolicy the conflict resolution policy for the container.
#ConflictResolutionPolicy: {
	// Mode - Indicates the conflict resolution mode. Possible values include: 'LastWriterWins', 'Custom'
	mode?: #ConflictResolutionMode @go(Mode)

	// ConflictResolutionPath - The conflict resolution path in the case of LastWriterWins mode.
	conflictResolutionPath?: null | string @go(ConflictResolutionPath,*string)

	// ConflictResolutionProcedure - The procedure to resolve conflicts in the case of custom mode.
	conflictResolutionProcedure?: null | string @go(ConflictResolutionProcedure,*string)
}

// ConsistencyPolicy the consistency policy for the Cosmos DB database account.
#ConsistencyPolicy: {
	// DefaultConsistencyLevel - The default consistency level and configuration settings of the Cosmos DB account. Possible values include: 'Eventual', 'Session', 'BoundedStaleness', 'Strong', 'ConsistentPrefix'
	defaultConsistencyLevel?: #DefaultConsistencyLevel @go(DefaultConsistencyLevel)

	// MaxStalenessPrefix - When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 â€“ 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	maxStalenessPrefix?: null | int64 @go(MaxStalenessPrefix,*int64)

	// MaxIntervalInSeconds - When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	maxIntervalInSeconds?: null | int32 @go(MaxIntervalInSeconds,*int32)
}

// ContainerPartitionKey the configuration of the partition key to be used for partitioning data into
// multiple partitions
#ContainerPartitionKey: {
	// Paths - List of paths using which data within the container can be partitioned
	paths?: null | [...string] @go(Paths,*[]string)

	// Kind - Indicates the kind of algorithm used for partitioning. Possible values include: 'PartitionKindHash', 'PartitionKindRange'
	kind?: #PartitionKind @go(Kind)
}

// DatabaseAccount an Azure Cosmos DB database account.
#DatabaseAccount: _

// DatabaseAccountConnectionString connection string for the Cosmos DB account
#DatabaseAccountConnectionString: _

// DatabaseAccountCreateUpdateParameters parameters to create and update Cosmos DB database accounts.
#DatabaseAccountCreateUpdateParameters: _

// DatabaseAccountCreateUpdateProperties properties to create and update Azure Cosmos DB database accounts.
#DatabaseAccountCreateUpdateProperties: {
	// ConsistencyPolicy - The consistency policy for the Cosmos DB account.
	consistencyPolicy?: null | #ConsistencyPolicy @go(ConsistencyPolicy,*ConsistencyPolicy)

	// Locations - An array that contains the georeplication locations enabled for the Cosmos DB account.
	locations?: null | [...#Location] @go(Locations,*[]Location)

	// DatabaseAccountOfferType - The offer type for the database
	databaseAccountOfferType?: null | string @go(DatabaseAccountOfferType,*string)

	// IPRangeFilter - Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
	ipRangeFilter?: null | string @go(IPRangeFilter,*string)

	// IsVirtualNetworkFilterEnabled - Flag to indicate whether to enable/disable Virtual Network ACL rules.
	isVirtualNetworkFilterEnabled?: null | bool @go(IsVirtualNetworkFilterEnabled,*bool)

	// EnableAutomaticFailover - Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
	enableAutomaticFailover?: null | bool @go(EnableAutomaticFailover,*bool)

	// Capabilities - List of Cosmos DB capabilities for the account
	capabilities?: null | [...#Capability] @go(Capabilities,*[]Capability)

	// VirtualNetworkRules - List of Virtual Network ACL rules configured for the Cosmos DB account.
	virtualNetworkRules?: null | [...#VirtualNetworkRule] @go(VirtualNetworkRules,*[]VirtualNetworkRule)

	// EnableMultipleWriteLocations - Enables the account to write in multiple locations
	enableMultipleWriteLocations?: null | bool @go(EnableMultipleWriteLocations,*bool)

	// EnableCassandraConnector - Enables the cassandra connector on the Cosmos DB C* account
	enableCassandraConnector?: null | bool @go(EnableCassandraConnector,*bool)

	// ConnectorOffer - The cassandra connector offer type for the Cosmos DB database C* account. Possible values include: 'Small'
	connectorOffer?: #ConnectorOffer @go(ConnectorOffer)
}

// DatabaseAccountListConnectionStringsResult the connection strings for the given database account.
#DatabaseAccountListConnectionStringsResult: {
	// ConnectionStrings - An array that contains the connection strings for the Cosmos DB account.
	connectionStrings?: null | [...#DatabaseAccountConnectionString] @go(ConnectionStrings,*[]DatabaseAccountConnectionString)
}

// DatabaseAccountListKeysResult the access keys for the given database account.
#DatabaseAccountListKeysResult: _

// DatabaseAccountListReadOnlyKeysResult the read-only access keys for the given database account.
#DatabaseAccountListReadOnlyKeysResult: _

// DatabaseAccountPatchParameters parameters for patching Azure Cosmos DB database account properties.
#DatabaseAccountPatchParameters: _

// DatabaseAccountPatchProperties properties to update Azure Cosmos DB database accounts.
#DatabaseAccountPatchProperties: {
	// Capabilities - List of Cosmos DB capabilities for the account
	capabilities?: null | [...#Capability] @go(Capabilities,*[]Capability)
}

// DatabaseAccountProperties properties for the database account.
#DatabaseAccountProperties: _

// DatabaseAccountRegenerateKeyParameters parameters to regenerate the keys within the database account.
#DatabaseAccountRegenerateKeyParameters: {
	// KeyKind - The access key to regenerate. Possible values include: 'Primary', 'Secondary', 'PrimaryReadonly', 'SecondaryReadonly'
	keyKind?: #KeyKind @go(KeyKind)
}

// DatabaseAccountsCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsCreateOrUpdateFuture: _

// DatabaseAccountsCreateUpdateCassandraKeyspaceFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsCreateUpdateCassandraKeyspaceFuture: _

// DatabaseAccountsCreateUpdateCassandraTableFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsCreateUpdateCassandraTableFuture: _

// DatabaseAccountsCreateUpdateGremlinDatabaseFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsCreateUpdateGremlinDatabaseFuture: _

// DatabaseAccountsCreateUpdateGremlinGraphFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
#DatabaseAccountsCreateUpdateGremlinGraphFuture: _

// DatabaseAccountsCreateUpdateMongoDBCollectionFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsCreateUpdateMongoDBCollectionFuture: _

// DatabaseAccountsCreateUpdateMongoDBDatabaseFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsCreateUpdateMongoDBDatabaseFuture: _

// DatabaseAccountsCreateUpdateSQLContainerFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
#DatabaseAccountsCreateUpdateSQLContainerFuture: _

// DatabaseAccountsCreateUpdateSQLDatabaseFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
#DatabaseAccountsCreateUpdateSQLDatabaseFuture: _

// DatabaseAccountsCreateUpdateTableFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsCreateUpdateTableFuture: _

// DatabaseAccountsDeleteCassandraKeyspaceFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
#DatabaseAccountsDeleteCassandraKeyspaceFuture: _

// DatabaseAccountsDeleteCassandraTableFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsDeleteCassandraTableFuture: _

// DatabaseAccountsDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
#DatabaseAccountsDeleteFuture: _

// DatabaseAccountsDeleteGremlinDatabaseFuture an abstraction for monitoring and retrieving the results of
// a long-running operation.
#DatabaseAccountsDeleteGremlinDatabaseFuture: _

// DatabaseAccountsDeleteGremlinGraphFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsDeleteGremlinGraphFuture: _

// DatabaseAccountsDeleteMongoDBCollectionFuture an abstraction for monitoring and retrieving the results
// of a long-running operation.
#DatabaseAccountsDeleteMongoDBCollectionFuture: _

// DatabaseAccountsDeleteMongoDBDatabaseFuture an abstraction for monitoring and retrieving the results of
// a long-running operation.
#DatabaseAccountsDeleteMongoDBDatabaseFuture: _

// DatabaseAccountsDeleteSQLContainerFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsDeleteSQLContainerFuture: _

// DatabaseAccountsDeleteSQLDatabaseFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsDeleteSQLDatabaseFuture: _

// DatabaseAccountsDeleteTableFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsDeleteTableFuture: _

// DatabaseAccountsFailoverPriorityChangeFuture an abstraction for monitoring and retrieving the results of
// a long-running operation.
#DatabaseAccountsFailoverPriorityChangeFuture: _

// DatabaseAccountsListResult the List operation response, that contains the database accounts and their
// properties.
#DatabaseAccountsListResult: _

// DatabaseAccountsOfflineRegionFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsOfflineRegionFuture: _

// DatabaseAccountsOnlineRegionFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsOnlineRegionFuture: _

// DatabaseAccountsPatchFuture an abstraction for monitoring and retrieving the results of a long-running
// operation.
#DatabaseAccountsPatchFuture: _

// DatabaseAccountsRegenerateKeyFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
#DatabaseAccountsRegenerateKeyFuture: _

// DatabaseAccountsUpdateCassandraKeyspaceThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateCassandraKeyspaceThroughputFuture: _

// DatabaseAccountsUpdateCassandraTableThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateCassandraTableThroughputFuture: _

// DatabaseAccountsUpdateGremlinDatabaseThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateGremlinDatabaseThroughputFuture: _

// DatabaseAccountsUpdateGremlinGraphThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateGremlinGraphThroughputFuture: _

// DatabaseAccountsUpdateMongoDBCollectionThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateMongoDBCollectionThroughputFuture: _

// DatabaseAccountsUpdateMongoDBDatabaseThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateMongoDBDatabaseThroughputFuture: _

// DatabaseAccountsUpdateSQLContainerThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateSQLContainerThroughputFuture: _

// DatabaseAccountsUpdateSQLDatabaseThroughputFuture an abstraction for monitoring and retrieving the
// results of a long-running operation.
#DatabaseAccountsUpdateSQLDatabaseThroughputFuture: _

// DatabaseAccountsUpdateTableThroughputFuture an abstraction for monitoring and retrieving the results of
// a long-running operation.
#DatabaseAccountsUpdateTableThroughputFuture: _

// ErrorResponse error Response.
#ErrorResponse: {
	// Code - Error code.
	code?: null | string @go(Code,*string)

	// Message - Error message indicating why the operation failed.
	message?: null | string @go(Message,*string)
}

// ExcludedPath ...
#ExcludedPath: {
	// Path - The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	path?: null | string @go(Path,*string)
}

// ExtendedResourceProperties the system generated resource properties associated with SQL databases and
// SQL containers.
#ExtendedResourceProperties: {
	// Rid - A system generated property. A unique identifier.
	"_rid"?: null | string @go(Rid,*string)

	// Ts - A system generated property that denotes the last updated timestamp of the resource.
	"_ts"?: _ @go(Ts,interface{})

	// Etag - A system generated property representing the resource etag required for optimistic concurrency control.
	"_etag"?: null | string @go(Etag,*string)
}

// FailoverPolicies the list of new failover policies for the failover priority change.
#FailoverPolicies: {
	// FailoverPolicies - List of failover policies.
	failoverPolicies?: null | [...#FailoverPolicy] @go(FailoverPolicies,*[]FailoverPolicy)
}

// FailoverPolicy the failover policy for a given region of a database account.
#FailoverPolicy: _

// GremlinDatabase an Azure Cosmos DB Gremlin database.
#GremlinDatabase: _

// GremlinDatabaseCreateUpdateParameters parameters to create and update Cosmos DB Gremlin database.
#GremlinDatabaseCreateUpdateParameters: _

// GremlinDatabaseCreateUpdateProperties properties to create and update Azure Cosmos DB Gremlin database.
#GremlinDatabaseCreateUpdateProperties: _

// GremlinDatabaseListResult the List operation response, that contains the Gremlin databases and their
// properties.
#GremlinDatabaseListResult: _

// GremlinDatabaseProperties the properties of an Azure Cosmos DB SQL database
#GremlinDatabaseProperties: {
	// Rid - A system generated property. A unique identifier.
	"_rid"?: null | string @go(Rid,*string)

	// Ts - A system generated property that denotes the last updated timestamp of the resource.
	"_ts"?: _ @go(Ts,interface{})

	// Etag - A system generated property representing the resource etag required for optimistic concurrency control.
	"_etag"?: null | string @go(Etag,*string)

	// ID - Name of the Cosmos DB Gremlin database
	id?: null | string @go(ID,*string)
}

// GremlinDatabaseResource cosmos DB Gremlin database id object
#GremlinDatabaseResource: {
	// ID - Name of the Cosmos DB Gremlin database
	id?: null | string @go(ID,*string)
}

// GremlinGraph an Azure Cosmos DB Gremlin graph.
#GremlinGraph: _

// GremlinGraphCreateUpdateParameters parameters to create and update Cosmos DB Gremlin graph.
#GremlinGraphCreateUpdateParameters: _

// GremlinGraphCreateUpdateProperties properties to create and update Azure Cosmos DB Gremlin graph.
#GremlinGraphCreateUpdateProperties: _

// GremlinGraphListResult the List operation response, that contains the graphs and their properties.
#GremlinGraphListResult: _

// GremlinGraphProperties the properties of an Azure Cosmos DB Gremlin graph
#GremlinGraphProperties: {
	// ID - Name of the Cosmos DB Gremlin graph
	id?: null | string @go(ID,*string)

	// IndexingPolicy - The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
	indexingPolicy?: null | #IndexingPolicy @go(IndexingPolicy,*IndexingPolicy)

	// PartitionKey - The configuration of the partition key to be used for partitioning data into multiple partitions
	partitionKey?: null | #ContainerPartitionKey @go(PartitionKey,*ContainerPartitionKey)

	// DefaultTTL - Default time to live
	defaultTtl?: null | int32 @go(DefaultTTL,*int32)

	// UniqueKeyPolicy - The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	uniqueKeyPolicy?: null | #UniqueKeyPolicy @go(UniqueKeyPolicy,*UniqueKeyPolicy)

	// ConflictResolutionPolicy - The conflict resolution policy for the graph.
	conflictResolutionPolicy?: null | #ConflictResolutionPolicy @go(ConflictResolutionPolicy,*ConflictResolutionPolicy)

	// Rid - A system generated property. A unique identifier.
	"_rid"?: null | string @go(Rid,*string)

	// Ts - A system generated property that denotes the last updated timestamp of the resource.
	"_ts"?: _ @go(Ts,interface{})

	// Etag - A system generated property representing the resource etag required for optimistic concurrency control.
	"_etag"?: null | string @go(Etag,*string)
}

// GremlinGraphResource cosmos DB Gremlin graph resource object
#GremlinGraphResource: {
	// ID - Name of the Cosmos DB Gremlin graph
	id?: null | string @go(ID,*string)

	// IndexingPolicy - The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
	indexingPolicy?: null | #IndexingPolicy @go(IndexingPolicy,*IndexingPolicy)

	// PartitionKey - The configuration of the partition key to be used for partitioning data into multiple partitions
	partitionKey?: null | #ContainerPartitionKey @go(PartitionKey,*ContainerPartitionKey)

	// DefaultTTL - Default time to live
	defaultTtl?: null | int32 @go(DefaultTTL,*int32)

	// UniqueKeyPolicy - The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	uniqueKeyPolicy?: null | #UniqueKeyPolicy @go(UniqueKeyPolicy,*UniqueKeyPolicy)

	// ConflictResolutionPolicy - The conflict resolution policy for the graph.
	conflictResolutionPolicy?: null | #ConflictResolutionPolicy @go(ConflictResolutionPolicy,*ConflictResolutionPolicy)
}

// IncludedPath the paths that are included in indexing
#IncludedPath: {
	// Path - The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	path?: null | string @go(Path,*string)

	// Indexes - List of indexes for this path
	indexes?: null | [...#Indexes] @go(Indexes,*[]Indexes)
}

// Indexes the indexes for the path.
#Indexes: {
	// DataType - The datatype for which the indexing behavior is applied to. Possible values include: 'String', 'Number', 'Point', 'Polygon', 'LineString', 'MultiPolygon'
	dataType?: #DataType @go(DataType)

	// Precision - The precision of the index. -1 is maximum precision.
	precision?: null | int32 @go(Precision,*int32)

	// Kind - Indicates the type of index. Possible values include: 'Hash', 'Range', 'Spatial'
	kind?: #IndexKind @go(Kind)
}

// IndexingPolicy cosmos DB indexing policy
#IndexingPolicy: {
	// Automatic - Indicates if the indexing policy is automatic
	automatic?: null | bool @go(Automatic,*bool)

	// IndexingMode - Indicates the indexing mode. Possible values include: 'Consistent', 'Lazy', 'None'
	indexingMode?: #IndexingMode @go(IndexingMode)

	// IncludedPaths - List of paths to include in the indexing
	includedPaths?: null | [...#IncludedPath] @go(IncludedPaths,*[]IncludedPath)

	// ExcludedPaths - List of paths to exclude from indexing
	excludedPaths?: null | [...#ExcludedPath] @go(ExcludedPaths,*[]ExcludedPath)
}

// Location a region in which the Azure Cosmos DB database account is deployed.
#Location: _

// Metric metric data
#Metric: _

// MetricAvailability the availability of the metric.
#MetricAvailability: _

// MetricDefinition the definition of a metric.
#MetricDefinition: _

// MetricDefinitionsListResult the response to a list metric definitions request.
#MetricDefinitionsListResult: _

// MetricListResult the response to a list metrics request.
#MetricListResult: _

// MetricName a metric name.
#MetricName: _

// MetricValue represents metrics values.
#MetricValue: _

// MongoDBCollection an Azure Cosmos DB MongoDB collection.
#MongoDBCollection: _

// MongoDBCollectionCreateUpdateParameters parameters to create and update Cosmos DB MongoDB collection.
#MongoDBCollectionCreateUpdateParameters: _

// MongoDBCollectionCreateUpdateProperties properties to create and update Azure Cosmos DB MongoDB
// collection.
#MongoDBCollectionCreateUpdateProperties: _

// MongoDBCollectionListResult the List operation response, that contains the MongoDB collections and their
// properties.
#MongoDBCollectionListResult: _

// MongoDBCollectionProperties the properties of an Azure Cosmos DB MongoDB collection
#MongoDBCollectionProperties: _

// MongoDBCollectionResource cosmos DB MongoDB collection resource object
#MongoDBCollectionResource: _

// MongoDBDatabase an Azure Cosmos DB MongoDB database.
#MongoDBDatabase: _

// MongoDBDatabaseCreateUpdateParameters parameters to create and update Cosmos DB MongoDB database.
#MongoDBDatabaseCreateUpdateParameters: _

// MongoDBDatabaseCreateUpdateProperties properties to create and update Azure Cosmos DB MongoDB database.
#MongoDBDatabaseCreateUpdateProperties: _

// MongoDBDatabaseListResult the List operation response, that contains the MongoDB databases and their
// properties.
#MongoDBDatabaseListResult: _

// MongoDBDatabaseProperties the properties of an Azure Cosmos DB MongoDB database
#MongoDBDatabaseProperties: {
	// ID - Name of the Cosmos DB MongoDB database
	id?: null | string @go(ID,*string)
}

// MongoDBDatabaseResource cosmos DB MongoDB database id object
#MongoDBDatabaseResource: {
	// ID - Name of the Cosmos DB MongoDB database
	id?: null | string @go(ID,*string)
}

// MongoIndex cosmos DB MongoDB collection index key
#MongoIndex: {
	// Key - Cosmos DB MongoDB collection index keys
	key?: null | #MongoIndexKeys @go(Key,*MongoIndexKeys)

	// Options - Cosmos DB MongoDB collection index key options
	options?: null | #MongoIndexOptions @go(Options,*MongoIndexOptions)
}

// MongoIndexKeys cosmos DB MongoDB collection resource object
#MongoIndexKeys: {
	// Keys - List of keys for each MongoDB collection in the Azure Cosmos DB service
	keys?: null | [...string] @go(Keys,*[]string)
}

// MongoIndexOptions cosmos DB MongoDB collection index options
#MongoIndexOptions: {
	// ExpireAfterSeconds - Expire after seconds
	expireAfterSeconds?: null | int32 @go(ExpireAfterSeconds,*int32)

	// Unique - Is unique or not
	unique?: null | bool @go(Unique,*bool)
}

// Operation REST API operation
#Operation: {
	// Name - Operation name: {provider}/{resource}/{operation}
	name?: null | string @go(Name,*string)

	// Display - The object that represents the operation.
	display?: null | #OperationDisplay @go(Display,*OperationDisplay)
}

// OperationDisplay the object that represents the operation.
#OperationDisplay: {
	// Provider - Service provider: Microsoft.ResourceProvider
	Provider?: null | string @go(,*string)

	// Resource - Resource on which the operation is performed: Profile, endpoint, etc.
	Resource?: null | string @go(,*string)

	// Operation - Operation type: Read, write, delete, etc.
	Operation?: null | string @go(,*string)

	// Description - Description of operation
	Description?: null | string @go(,*string)
}

// OperationListResult result of the request to list Resource Provider operations. It contains a list of
// operations and a URL link to get the next set of results.
#OperationListResult: {
	// Value - List of operations supported by the Resource Provider.
	value?: null | [...#Operation] @go(Value,*[]Operation)

	// NextLink - URL to get the next set of operation list results if there are any.
	nextLink?: null | string @go(NextLink,*string)
}

// PartitionMetric the metric values for a single partition.
#PartitionMetric: _

// PartitionMetricListResult the response to a list partition metrics request.
#PartitionMetricListResult: _

// PartitionUsage the partition level usage data for a usage request.
#PartitionUsage: _

// PartitionUsagesResult the response to a list partition level usage request.
#PartitionUsagesResult: _

// PercentileMetric percentile Metric data
#PercentileMetric: _

// PercentileMetricListResult the response to a list percentile metrics request.
#PercentileMetricListResult: _

// PercentileMetricValue represents percentile metrics values.
#PercentileMetricValue: _

// RegionForOnlineOffline cosmos DB region to online or offline.
#RegionForOnlineOffline: {
	// Region - Cosmos DB region, with spaces between words and each word capitalized.
	region?: null | string @go(Region,*string)
}

// Resource the core properties of ARM resources.
#Resource: _

// SQLContainer an Azure Cosmos DB container.
#SQLContainer: _

// SQLContainerCreateUpdateParameters parameters to create and update Cosmos DB container.
#SQLContainerCreateUpdateParameters: _

// SQLContainerCreateUpdateProperties properties to create and update Azure Cosmos DB container.
#SQLContainerCreateUpdateProperties: _

// SQLContainerListResult the List operation response, that contains the containers and their properties.
#SQLContainerListResult: _

// SQLContainerProperties the properties of an Azure Cosmos DB container
#SQLContainerProperties: {
	// ID - Name of the Cosmos DB SQL container
	id?: null | string @go(ID,*string)

	// IndexingPolicy - The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
	indexingPolicy?: null | #IndexingPolicy @go(IndexingPolicy,*IndexingPolicy)

	// PartitionKey - The configuration of the partition key to be used for partitioning data into multiple partitions
	partitionKey?: null | #ContainerPartitionKey @go(PartitionKey,*ContainerPartitionKey)

	// DefaultTTL - Default time to live
	defaultTtl?: null | int32 @go(DefaultTTL,*int32)

	// UniqueKeyPolicy - The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	uniqueKeyPolicy?: null | #UniqueKeyPolicy @go(UniqueKeyPolicy,*UniqueKeyPolicy)

	// ConflictResolutionPolicy - The conflict resolution policy for the container.
	conflictResolutionPolicy?: null | #ConflictResolutionPolicy @go(ConflictResolutionPolicy,*ConflictResolutionPolicy)

	// Rid - A system generated property. A unique identifier.
	"_rid"?: null | string @go(Rid,*string)

	// Ts - A system generated property that denotes the last updated timestamp of the resource.
	"_ts"?: _ @go(Ts,interface{})

	// Etag - A system generated property representing the resource etag required for optimistic concurrency control.
	"_etag"?: null | string @go(Etag,*string)
}

// SQLContainerResource cosmos DB SQL container resource object
#SQLContainerResource: {
	// ID - Name of the Cosmos DB SQL container
	id?: null | string @go(ID,*string)

	// IndexingPolicy - The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
	indexingPolicy?: null | #IndexingPolicy @go(IndexingPolicy,*IndexingPolicy)

	// PartitionKey - The configuration of the partition key to be used for partitioning data into multiple partitions
	partitionKey?: null | #ContainerPartitionKey @go(PartitionKey,*ContainerPartitionKey)

	// DefaultTTL - Default time to live
	defaultTtl?: null | int32 @go(DefaultTTL,*int32)

	// UniqueKeyPolicy - The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	uniqueKeyPolicy?: null | #UniqueKeyPolicy @go(UniqueKeyPolicy,*UniqueKeyPolicy)

	// ConflictResolutionPolicy - The conflict resolution policy for the container.
	conflictResolutionPolicy?: null | #ConflictResolutionPolicy @go(ConflictResolutionPolicy,*ConflictResolutionPolicy)
}

// SQLDatabase an Azure Cosmos DB SQL database.
#SQLDatabase: _

// SQLDatabaseCreateUpdateParameters parameters to create and update Cosmos DB SQL database.
#SQLDatabaseCreateUpdateParameters: _

// SQLDatabaseCreateUpdateProperties properties to create and update Azure Cosmos DB SQL database.
#SQLDatabaseCreateUpdateProperties: _

// SQLDatabaseListResult the List operation response, that contains the SQL databases and their properties.
#SQLDatabaseListResult: _

// SQLDatabaseProperties the properties of an Azure Cosmos DB SQL database
#SQLDatabaseProperties: {
	// ID - Name of the Cosmos DB SQL database
	id?: null | string @go(ID,*string)

	// Rid - A system generated property. A unique identifier.
	"_rid"?: null | string @go(Rid,*string)

	// Ts - A system generated property that denotes the last updated timestamp of the resource.
	"_ts"?: _ @go(Ts,interface{})

	// Etag - A system generated property representing the resource etag required for optimistic concurrency control.
	"_etag"?: null | string @go(Etag,*string)

	// Colls - A system generated property that specified the addressable path of the collections resource.
	"_colls"?: null | string @go(Colls,*string)

	// Users - A system generated property that specifies the addressable path of the users resource.
	"_users"?: null | string @go(Users,*string)
}

// SQLDatabaseResource cosmos DB SQL database id object
#SQLDatabaseResource: {
	// ID - Name of the Cosmos DB SQL database
	id?: null | string @go(ID,*string)
}

// Table an Azure Cosmos DB Table.
#Table: _

// TableCreateUpdateParameters parameters to create and update Cosmos DB Table.
#TableCreateUpdateParameters: _

// TableCreateUpdateProperties properties to create and update Azure Cosmos DB Table.
#TableCreateUpdateProperties: _

// TableListResult the List operation response, that contains the Table and their properties.
#TableListResult: _

// TableProperties the properties of an Azure Cosmos Table
#TableProperties: {
	// ID - Name of the Cosmos DB table
	id?: null | string @go(ID,*string)
}

// TableResource cosmos DB table id object
#TableResource: {
	// ID - Name of the Cosmos DB table
	id?: null | string @go(ID,*string)
}

// Throughput an Azure Cosmos DB resource throughput.
#Throughput: _

// ThroughputProperties the properties of an Azure Cosmos DB resource throughput
#ThroughputProperties: {
	// Throughput - Value of the Cosmos DB resource throughput
	throughput?: null | int32 @go(Throughput,*int32)
}

// ThroughputResource cosmos DB resource throughput object
#ThroughputResource: {
	// Throughput - Value of the Cosmos DB resource throughput
	throughput?: null | int32 @go(Throughput,*int32)
}

// ThroughputUpdateParameters parameters to update Cosmos DB resource throughput.
#ThroughputUpdateParameters: _

// ThroughputUpdateProperties properties to update Azure Cosmos DB resource throughput.
#ThroughputUpdateProperties: {
	// Resource - The standard JSON format of a resource throughput
	resource?: null | #ThroughputResource @go(Resource,*ThroughputResource)
}

// UniqueKey the unique key on that enforces uniqueness constraint on documents in the collection in the
// Azure Cosmos DB service.
#UniqueKey: {
	// Paths - List of paths must be unique for each document in the Azure Cosmos DB service
	paths?: null | [...string] @go(Paths,*[]string)
}

// UniqueKeyPolicy the unique key policy configuration for specifying uniqueness constraints on documents
// in the collection in the Azure Cosmos DB service.
#UniqueKeyPolicy: {
	// UniqueKeys - List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	uniqueKeys?: null | [...#UniqueKey] @go(UniqueKeys,*[]UniqueKey)
}

// Usage the usage data for a usage request.
#Usage: _

// UsagesResult the response to a list usage request.
#UsagesResult: _

// VirtualNetworkRule virtual Network ACL Rule object
#VirtualNetworkRule: {
	// ID - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	id?: null | string @go(ID,*string)

	// IgnoreMissingVNetServiceEndpoint - Create firewall rule before the virtual network has vnet service endpoint enabled.
	ignoreMissingVNetServiceEndpoint?: null | bool @go(IgnoreMissingVNetServiceEndpoint,*bool)
}

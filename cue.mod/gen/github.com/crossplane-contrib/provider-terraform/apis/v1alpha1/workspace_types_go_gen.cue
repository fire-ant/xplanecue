// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-terraform/apis/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// A Var represents a Terraform configuration variable.
#Var: {
	key:   string @go(Key)
	value: string @go(Value)
}

// A VarFileSource specifies the source of a Terraform vars file.
// +kubebuilder:validation:Enum=ConfigMapKey;SecretKey
#VarFileSource: string // #enumVarFileSource

#enumVarFileSource:
	#VarFileSourceConfigMapKey |
	#VarFileSourceSecretKey

#VarFileSourceConfigMapKey: #VarFileSource & "ConfigMapKey"
#VarFileSourceSecretKey:    #VarFileSource & "SecretKey"

// A VarFileFormat specifies the format of a Terraform vars file.
// +kubebuilder:validation:Enum=HCL;JSON
#VarFileFormat: string

// A VarFile is a file containing many Terraform variables.
#VarFile: {
	// Source of this vars file.
	source: #VarFileSource @go(Source)

	// Format of this vars file.
	// +kubebuilder:default=HCL
	// +optional
	format?: null | #VarFileFormat @go(Format,*VarFileFormat)

	// A ConfigMap key containing the vars file.
	// +optional
	configMapKeyRef?: null | #KeyReference @go(ConfigMapKeyReference,*KeyReference)

	// A Secret key containing the vars file.
	// +optional
	secretKeyRef?: null | #KeyReference @go(SecretKeyReference,*KeyReference)
}

// A KeyReference references a key within a Secret or a ConfigMap.
#KeyReference: {
	// Namespace of the referenced resource.
	namespace: string @go(Namespace)

	// Name of the referenced resource.
	name: string @go(Name)

	// Key within the referenced resource.
	key: string @go(Key)
}

// A ModuleSource represents the source of a Terraform module.
// +kubebuilder:validation:Enum=Remote;Inline
#ModuleSource: string // #enumModuleSource

#enumModuleSource:
	#ModuleSourceRemote |
	#ModuleSourceInline

#ModuleSourceRemote: #ModuleSource & "Remote"
#ModuleSourceInline: #ModuleSource & "Inline"

// WorkspaceParameters are the configurable fields of a Workspace.
#WorkspaceParameters: {
	// The root module of this workspace; i.e. the module containing its main.tf
	// file. When the workspace's source is 'Remote' (the default) this can be
	// any address supported by terraform init -from-module, for example a git
	// repository or an S3 bucket. When the workspace's source is 'Inline' the
	// content of a simple main.tf file may be written inline.
	module: string @go(Module)

	// Source of the root module of this workspace.
	source: #ModuleSource @go(Source)

	// Entrypoint for `terraform init` within the module
	// +kubebuilder:default=""
	// +optional
	entrypoint: string @go(Entrypoint)

	// Configuration variables.
	// +optional
	vars?: [...#Var] @go(Vars,[]Var)

	// Files of configuration variables. Explicitly declared vars take
	// precedence.
	// +optional
	varFiles?: [...#VarFile] @go(VarFiles,[]VarFile)

	// Arguments to be included in the terraform init CLI command
	initArgs?: [...string] @go(InitArgs,[]string)

	// Arguments to be included in the terraform plan CLI command
	planArgs?: [...string] @go(PlanArgs,[]string)

	// Arguments to be included in the terraform apply CLI command
	applyArgs?: [...string] @go(ApplyArgs,[]string)

	// Arguments to be included in the terraform destroy CLI command
	destroyArgs?: [...string] @go(DestroyArgs,[]string)
}

// WorkspaceObservation are the observable fields of a Workspace.
#WorkspaceObservation: {
	outputs?: {[string]: string} @go(Outputs,map[string]string)
}

// A WorkspaceSpec defines the desired state of a Workspace.
#WorkspaceSpec: {
	xpv1.#ResourceSpec
	forProvider: #WorkspaceParameters @go(ForProvider)
}

// A WorkspaceStatus represents the observed state of a Workspace.
#WorkspaceStatus: {
	xpv1.#ResourceStatus
	atProvider?: #WorkspaceObservation @go(AtProvider)
}

// A Workspace of Terraform Configuration.
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,terraform}
#Workspace: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #WorkspaceSpec     @go(Spec)
	status?:   #WorkspaceStatus   @go(Status)
}

// WorkspaceList contains a list of Workspace
#WorkspaceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Workspace] @go(Items,[]Workspace)
}

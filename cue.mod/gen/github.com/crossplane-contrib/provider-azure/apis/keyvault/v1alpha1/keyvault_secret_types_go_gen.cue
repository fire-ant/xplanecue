// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-azure/apis/keyvault/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

// KeyVaultSecretAttributesParameters defines the desired state of an Azure Key Vault Secret Attributes.
// KeyVaultSecretAttributesParameters contains WRITE-ONLY fields.
#KeyVaultSecretAttributesParameters: {
	// Enabled - Determines whether the object is enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// NotBeforeDate - Not before date in UTC (RFC3339 format).
	notBeforeDate?: null | metav1.#Time @go(NotBeforeDate,*metav1.Time)

	// Expires - Expiry date in UTC (RFC3339 format).
	expirationDate?: null | metav1.#Time @go(ExpirationDate,*metav1.Time)
}

// KeyVaultSecretParameters defines the desired state of an Azure Key Vault Secret.
// https://docs.microsoft.com/en-us/rest/api/keyvault/#secret-operations
#KeyVaultSecretParameters: {
	// VaultBaseURL - The vault name, for example https://myvault.vault.azure.net.
	vaultBaseUrl: string @go(VaultBaseURL)

	// Name - The name of the secret
	name: string @go(Name)

	// Value - The value of the secret
	value: xpv1.#SecretKeySelector @go(Value)

	// ContentType - Type of the secret value such as a password
	// +optional
	contentType?: null | string @go(ContentType,*string)

	// SecretAttributes - The secret management attributes
	// +optional
	attributes?: null | #KeyVaultSecretAttributesParameters @go(SecretAttributes,*KeyVaultSecretAttributesParameters)

	// Tags - Application-specific metadata in the form of key-value pairs
	// +optional
	tags: {[string]: string} @go(Tags,map[string]string)
}

// A KeyVaultSecretSpec defines the desired state of a Secret.
#KeyVaultSecretSpec: {
	xpv1.#ResourceSpec
	forProvider: #KeyVaultSecretParameters @go(ForProvider)
}

// KeyVaultSecretAttributesObservation represents the observed state of an Azure Key Vault Secret Attributes.
// KeyVaultSecretAttributesObservation contains READ-ONLY fields.
#KeyVaultSecretAttributesObservation: {
	// RecoveryLevel - READ-ONLY;
	// Reflects the deletion recovery level currently in effect for secrets in the
	// current vault. If it contains 'Purgeable', the secret can be permanently
	// deleted by a privileged user; otherwise, only the system can purge the secret,
	// at the end of the retention interval.
	// Possible values include:
	// 'Purgeable',
	// 'RecoverablePurgeable',
	// 'Recoverable',
	// 'RecoverableProtectedSubscription',
	// 'CustomizedRecoverablePurgeable',
	// 'CustomizedRecoverable',
	// 'CustomizedRecoverableProtectedSubscription'
	recoveryLevel?: string @go(RecoveryLevel)

	// Created - READ-ONLY; Creation time in UTC.
	created?: null | metav1.#Time @go(Created,*metav1.Time)

	// Updated - READ-ONLY; Last updated time in UTC.
	updated?: null | metav1.#Time @go(Updated,*metav1.Time)
}

// KeyVaultSecretObservation represents the observed state of the Secret object in Azure.
#KeyVaultSecretObservation: {
	// ID - The secret id.
	id?: string @go(ID)

	// Attributes - The secret management attributes.
	attributes?: null | #KeyVaultSecretAttributesObservation @go(Attributes,*KeyVaultSecretAttributesObservation)

	// Kid - READ-ONLY; If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.
	kid?: null | string @go(Kid,*string)

	// Managed - READ-ONLY; True if the secret's lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.
	managed?: null | bool @go(Managed,*bool)
}

// A KeyVaultSecretStatus represents the observed state of a Secret.
#KeyVaultSecretStatus: {
	xpv1.#ResourceStatus
	atProvider?: #KeyVaultSecretObservation @go(AtProvider)
}

// A KeyVaultSecret is a managed resource that represents an Azure KeyVaultSecret cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure},shortName=kvsecret
#KeyVaultSecret: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:      #KeyVaultSecretSpec   @go(Spec)
	status?:   #KeyVaultSecretStatus @go(Status)
}

// KeyVaultSecretList contains a list of Secret.
#KeyVaultSecretList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#KeyVaultSecret] @go(Items,[]KeyVaultSecret)
}

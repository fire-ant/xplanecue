// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-azure/apis/compute/v1alpha3

package v1alpha3

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DefaultNodeCount is the default node count for a cluster.
#DefaultNodeCount: 1

// AKSClusterParameters define the desired state of an Azure Kubernetes Engine
// cluster.
#AKSClusterParameters: {
	// ResourceGroupName is the name of the resource group that the cluster will
	// be created in
	resourceGroupName?: string @go(ResourceGroupName)

	// ResourceGroupNameRef - A reference to a ResourceGroup to retrieve its
	// name
	resourceGroupNameRef?: null | xpv1.#Reference @go(ResourceGroupNameRef,*xpv1.Reference)

	// ResourceGroupNameSelector - Select a reference to a ResourceGroup to
	// retrieve its name
	resourceGroupNameSelector?: null | xpv1.#Selector @go(ResourceGroupNameSelector,*xpv1.Selector)

	// Location is the Azure location that the cluster will be created in
	location: string @go(Location)

	// Version is the Kubernetes version that will be deployed to the cluster
	version: string @go(Version)

	// VnetSubnetID is the subnet to which the cluster will be deployed.
	// +optional
	vnetSubnetID?: string @go(VnetSubnetID)

	// VnetSubnetIDRef - A reference to a Subnet to retrieve its ID
	vnetSubnetIDRef?: null | xpv1.#Reference @go(VnetSubnetIDRef,*xpv1.Reference)

	// VnetSubnetIDSelector - Select a reference to a Subnet to retrieve
	// its ID
	vnetSubnetIDSelector?: null | xpv1.#Selector @go(VnetSubnetIDSelector,*xpv1.Selector)

	// NodeCount is the number of nodes that the cluster will initially be
	// created with.  This can be scaled over time and defaults to 1.
	// +kubebuilder:validation:Maximum=100
	// +kubebuilder:validation:Minimum=0
	// +optional
	nodeCount?: null | int @go(NodeCount,*int)

	// NodeVMSize is the name of the worker node VM size, e.g., Standard_B2s,
	// Standard_F2s_v2, etc.
	// +optional
	nodeVMSize: string @go(NodeVMSize)

	// DNSNamePrefix is the DNS name prefix to use with the hosted Kubernetes
	// API server FQDN. You will use this to connect to the Kubernetes API when
	// managing containers after creating the cluster.
	// +optional
	dnsNamePrefix: string @go(DNSNamePrefix)

	// DisableRBAC determines whether RBAC will be disabled or enabled in the
	// cluster.
	// +optional
	disableRBAC?: bool @go(DisableRBAC)
}

// An AKSClusterSpec defines the desired state of a AKSCluster.
#AKSClusterSpec: {
	xpv1.#ResourceSpec

	#AKSClusterParameters
}

// An AKSClusterStatus represents the observed state of an AKSCluster.
#AKSClusterStatus: {
	xpv1.#ResourceStatus

	// State is the current state of the cluster.
	state?: string @go(State)

	// ProviderID is the external ID to identify this resource in the cloud
	// provider.
	providerID?: string @go(ProviderID)

	// Endpoint is the endpoint where the cluster can be reached
	endpoint?: string @go(Endpoint)
}

// An AKSCluster is a managed resource that represents an Azure Kubernetes
// Engine cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="ENDPOINT",type="string",JSONPath=".status.endpoint"
// +kubebuilder:printcolumn:name="LOCATION",type="string",JSONPath=".spec.location"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
// +kubebuilder:subresource:status
#AKSCluster: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #AKSClusterSpec    @go(Spec)
	status?:   #AKSClusterStatus  @go(Status)
}

// AKSClusterList contains a list of AKSCluster.
#AKSClusterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AKSCluster] @go(Items,[]AKSCluster)
}

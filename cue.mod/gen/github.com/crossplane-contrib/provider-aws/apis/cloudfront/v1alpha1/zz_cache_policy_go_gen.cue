// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cloudfront/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CachePolicyParameters defines the desired state of CachePolicy
#CachePolicyParameters: {
	// Region is which region the CachePolicy will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A cache policy configuration.
	// +kubebuilder:validation:Required
	cachePolicyConfig?: null | #CachePolicyConfig @go(CachePolicyConfig,*CachePolicyConfig)

	#CustomCachePolicyParameters
}

// CachePolicySpec defines the desired state of CachePolicy
#CachePolicySpec: {
	xpv1.#ResourceSpec
	forProvider: #CachePolicyParameters @go(ForProvider)
}

// CachePolicyObservation defines the observed state of CachePolicy
#CachePolicyObservation: {
	// A cache policy.
	cachePolicy?: null | #CachePolicy_SDK @go(CachePolicy,*CachePolicy_SDK)

	// The current version of the cache policy.
	eTag?: null | string @go(ETag,*string)

	// The fully qualified URI of the cache policy just created.
	location?: null | string @go(Location,*string)
}

// CachePolicyStatus defines the observed state of CachePolicy.
#CachePolicyStatus: {
	xpv1.#ResourceStatus
	atProvider?: #CachePolicyObservation @go(AtProvider)
}

// CachePolicy is the Schema for the CachePolicies API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CachePolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #CachePolicySpec   @go(Spec)
	status?:   #CachePolicyStatus @go(Status)
}

// CachePolicyList contains a list of CachePolicies
#CachePolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CachePolicy] @go(Items,[]CachePolicy)
}

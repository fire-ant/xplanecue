// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/opensearchservice/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DomainParameters defines the desired state of Domain
#DomainParameters: {
	// Region is which region the Domain will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// IAM access policy as a JSON-formatted string.
	accessPolicies?: null | string @go(AccessPolicies,*string)

	// Option to allow references to indices in an HTTP request body. Must be false
	// when configuring access to individual sub-resources. By default, the value
	// is true. See Advanced cluster parameters (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options)
	// for more information.
	advancedOptions?: {[string]: null | string} @go(AdvancedOptions,map[string]*string)

	// Specifies advanced security options.
	advancedSecurityOptions?: null | #AdvancedSecurityOptionsInput @go(AdvancedSecurityOptions,*AdvancedSecurityOptionsInput)

	// Specifies Auto-Tune options.
	autoTuneOptions?: null | #AutoTuneOptionsInput @go(AutoTuneOptions,*AutoTuneOptionsInput)

	// Configuration options for a domain. Specifies the instance type and number
	// of instances in the domain.
	clusterConfig?: null | #ClusterConfig @go(ClusterConfig,*ClusterConfig)

	// Options to specify the Cognito user and identity pools for OpenSearch Dashboards
	// authentication. For more information, see Configuring Amazon Cognito authentication
	// for OpenSearch Dashboards (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html).
	cognitoOptions?: null | #CognitoOptions @go(CognitoOptions,*CognitoOptions)

	// Options to specify configurations that will be applied to the domain endpoint.
	domainEndpointOptions?: null | #DomainEndpointOptions @go(DomainEndpointOptions,*DomainEndpointOptions)

	// Options to enable, disable, and specify the type and size of EBS storage
	// volumes.
	ebsOptions?: null | #EBSOptions @go(EBSOptions,*EBSOptions)

	// Options for encryption of data at rest.
	encryptionAtRestOptions?: null | #EncryptionAtRestOptions @go(EncryptionAtRestOptions,*EncryptionAtRestOptions)

	// String of format Elasticsearch_X.Y or OpenSearch_X.Y to specify the engine
	// version for the Amazon OpenSearch Service domain. For example, "OpenSearch_1.0"
	// or "Elasticsearch_7.9". For more information, see Creating and managing Amazon
	// OpenSearch Service domains (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomains).
	engineVersion?: null | string @go(EngineVersion,*string)

	// Map of LogType and LogPublishingOption, each containing options to publish
	// a given type of OpenSearch log.
	logPublishingOptions?: {[string]: null | #LogPublishingOption} @go(LogPublishingOptions,map[string]*LogPublishingOption)

	// The name of the Amazon OpenSearch Service domain you're creating. Domain
	// names are unique across the domains owned by an account within an AWS region.
	// Domain names must start with a lowercase letter and can contain the following
	// characters: a-z (lowercase), 0-9, and - (hyphen).
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Node-to-node encryption options.
	nodeToNodeEncryptionOptions?: null | #NodeToNodeEncryptionOptions @go(NodeToNodeEncryptionOptions,*NodeToNodeEncryptionOptions)

	// A list of Tag added during domain creation.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// Options to specify the subnets and security groups for a VPC endpoint. For
	// more information, see Launching your Amazon OpenSearch Service domains using
	// a VPC (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html).
	vpcOptions?: null | #VPCOptions @go(VPCOptions,*VPCOptions)

	#CustomDomainParameters
}

// DomainSpec defines the desired state of Domain
#DomainSpec: {
	xpv1.#ResourceSpec
	forProvider: #DomainParameters @go(ForProvider)
}

// DomainObservation defines the observed state of Domain
#DomainObservation: {
	// The Amazon Resource Name (ARN) of a domain. See IAM identifiers (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
	// in the AWS Identity and Access Management User Guide for more information.
	arn?: null | string @go(ARN,*string)

	// Specifies change details of the domain configuration change.
	changeProgressDetails?: null | #ChangeProgressDetails @go(ChangeProgressDetails,*ChangeProgressDetails)

	// The domain creation status. True if the creation of a domain is complete.
	// False if domain creation is still in progress.
	created?: null | bool @go(Created,*bool)

	// The domain deletion status. True if a delete request has been received for
	// the domain but resource cleanup is still in progress. False if the domain
	// has not been deleted. Once domain deletion is complete, the status of the
	// domain is no longer returned.
	deleted?: null | bool @go(Deleted,*bool)

	// The unique identifier for the specified domain.
	domainID?: null | string @go(DomainID,*string)

	// The domain endpoint that you use to submit index and search requests.
	endpoint?: null | string @go(Endpoint,*string)

	// Map containing the domain endpoints used to submit index and search requests.
	// Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
	endpoints?: {[string]: null | string} @go(Endpoints,map[string]*string)

	// The status of the domain configuration. True if Amazon OpenSearch Service
	// is processing configuration changes. False if the configuration is active.
	processing?: null | bool @go(Processing,*bool)

	// The current status of the domain's service software.
	serviceSoftwareOptions?: null | #ServiceSoftwareOptions @go(ServiceSoftwareOptions,*ServiceSoftwareOptions)

	// The status of the SnapshotOptions.
	snapshotOptions?: null | #SnapshotOptions @go(SnapshotOptions,*SnapshotOptions)

	// The status of a domain version upgrade. True if Amazon OpenSearch Service
	// is undergoing a version upgrade. False if the configuration is active.
	upgradeProcessing?: null | bool @go(UpgradeProcessing,*bool)
}

// DomainStatus defines the observed state of Domain.
#DomainStatus: {
	xpv1.#ResourceStatus
	atProvider?: #DomainObservation @go(AtProvider)
}

// Domain is the Schema for the Domains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Domain: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #DomainSpec        @go(Spec)
	status?:   #DomainStatus      @go(Status)
}

// DomainList contains a list of Domains
#DomainList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Domain] @go(Items,[]Domain)
}

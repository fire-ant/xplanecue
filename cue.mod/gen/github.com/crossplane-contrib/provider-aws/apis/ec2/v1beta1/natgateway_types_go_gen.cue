// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1

package v1beta1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NatGatewayStatusPending:   "pending"
#NatGatewayStatusFailed:    "failed"
#NatGatewayStatusAvailable: "available"
#NatGatewayStatusDeleting:  "deleting"
#NatGatewayStatusDeleted:   "deleted"

// NATGatewayParameters defined the desired state of an AWS VPC NAT Gateway
#NATGatewayParameters: {
	// Region is the region you'd like your NATGateway to be created in.
	// +immutable
	region: string @go(Region)

	// AllocationID is the Elastic IP allocation ID
	// +immutable
	// +optional
	// +crossplane:generate:reference:type=Address
	allocationId?: null | string @go(AllocationID,*string)

	// AllocationIDRef references an EIP and retrieves it's allocation id
	// +immutable
	// +optional
	allocationIdRef?: null | xpv1.#Reference @go(AllocationIDRef,*xpv1.Reference)

	// AllocationIDSelector references an EIP by selector and retrieves it's allocation id
	// +immutable
	// +optional
	allocationIdSelector?: null | xpv1.#Selector @go(AllocationIDSelector,*xpv1.Selector)

	// SubnetID is the subnet the NAT gateways needs to be associated to
	// +immutable
	// +optional
	// +crossplane:generate:reference:type=Subnet
	subnetId?: null | string @go(SubnetID,*string)

	// SubnetIDRef references a subnet and retrives it's subnet id
	// +immutable
	// +optional
	subnetIdRef?: null | xpv1.#Reference @go(SubnetIDRef,*xpv1.Reference)

	// SubnetIDSelector references a subnet by selector and retrives it's subnet id
	// +immutable
	// +optional
	subnetIdSelector?: null | xpv1.#Selector @go(SubnetIDSelector,*xpv1.Selector)

	// Indicates whether the NAT gateway supports public or private connectivity. The
	// default is public connectivity.
	// +optional
	// +kubebuilder:validation:Enum=public;private
	connectivityType?: string @go(ConnectivityType)

	// Tags represents to current ec2 tags.
	// +optional
	tags?: [...#Tag] @go(Tags,[]Tag)
}

// NATGatewaySpec defines the desired state of a NAT Gateway
#NATGatewaySpec: {
	xpv1.#ResourceSpec
	forProvider: #NATGatewayParameters @go(ForProvider)
}

// NATGatewayObservation keeps the state for the CR
#NATGatewayObservation: {
	createTime?:     null | metav1.#Time @go(CreateTime,*metav1.Time)
	deleteTime?:     null | metav1.#Time @go(DeleteTime,*metav1.Time)
	failureCode?:    string              @go(FailureCode)
	failureMessage?: string              @go(FailureMessage)
	natGatewayAddresses?: [...#NATGatewayAddress] @go(NatGatewayAddresses,[]NATGatewayAddress)
	natGatewayId?: string @go(NatGatewayID)
	state?:        string @go(State)
	vpcId?:        string @go(VpcID)
}

// NATGatewayAddress describes the details of network
#NATGatewayAddress: {
	allocationId?:       string @go(AllocationID)
	networkInterfaceId?: string @go(NetworkInterfaceID)
	privateIp?:          string @go(PrivateIP)
	publicIp?:           string @go(PublicIP)
}

// NATGatewayStatus describes the observed state
#NATGatewayStatus: {
	xpv1.#ResourceStatus
	atProvider?: #NATGatewayObservation @go(AtProvider)
}

// A NATGateway is a managed resource that represents an AWS VPC NAT
// Gateway.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="ID",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="VPC",type="string",JSONPath=".status.atProvider.vpcId"
// +kubebuilder:printcolumn:name="SUBNET",type="string",JSONPath=".spec.forProvider.subnetId"
// +kubebuilder:printcolumn:name="ALLOCATION ID",type="string",JSONPath=".spec.forProvider.allocationId"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
// +kubebuilder:storageversion
#NATGateway: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #NATGatewaySpec    @go(Spec)
	status?:   #NATGatewayStatus  @go(Status)
}

// NATGatewayList contains a list of NatGateways
#NATGatewayList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NATGateway] @go(Items,[]NATGateway)
}

// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// LaunchTemplateVersionParameters defines the desired state of LaunchTemplateVersion
#LaunchTemplateVersionParameters: {
	// Region is which region the LaunchTemplateVersion will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The information for the launch template.
	// +kubebuilder:validation:Required
	launchTemplateData?: null | #RequestLaunchTemplateData @go(LaunchTemplateData,*RequestLaunchTemplateData)

	// The version number of the launch template version on which to base the new
	// version. The new version inherits the same launch parameters as the source
	// version, except for parameters that you specify in LaunchTemplateData. Snapshots
	// applied to the block device mapping are ignored when creating a new version
	// unless they are explicitly included.
	sourceVersion?: null | string @go(SourceVersion,*string)

	// A description for the version of the launch template.
	versionDescription?: null | string @go(VersionDescription,*string)

	#CustomLaunchTemplateVersionParameters
}

// LaunchTemplateVersionSpec defines the desired state of LaunchTemplateVersion
#LaunchTemplateVersionSpec: {
	xpv1.#ResourceSpec
	forProvider: #LaunchTemplateVersionParameters @go(ForProvider)
}

// LaunchTemplateVersionObservation defines the observed state of LaunchTemplateVersion
#LaunchTemplateVersionObservation: {
	// Information about the launch template version.
	launchTemplateVersion?: null | #LaunchTemplateVersion_SDK @go(LaunchTemplateVersion,*LaunchTemplateVersion_SDK)

	// If the new version of the launch template contains parameters or parameter
	// combinations that are not valid, an error code and an error message are returned
	// for each issue that's found.
	warning?: null | #ValidationWarning @go(Warning,*ValidationWarning)
}

// LaunchTemplateVersionStatus defines the observed state of LaunchTemplateVersion.
#LaunchTemplateVersionStatus: {
	xpv1.#ResourceStatus
	atProvider?: #LaunchTemplateVersionObservation @go(AtProvider)
}

// LaunchTemplateVersion is the Schema for the LaunchTemplateVersions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LaunchTemplateVersion: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec:      #LaunchTemplateVersionSpec   @go(Spec)
	status?:   #LaunchTemplateVersionStatus @go(Status)
}

// LaunchTemplateVersionList contains a list of LaunchTemplateVersions
#LaunchTemplateVersionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LaunchTemplateVersion] @go(Items,[]LaunchTemplateVersion)
}

// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cognitoidentityprovider/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ResourceServerParameters defines the desired state of ResourceServer
#ResourceServerParameters: {
	// Region is which region the ResourceServer will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A unique resource server identifier for the resource server. This could be
	// an HTTPS endpoint where the resource server is located, such as https://my-weather-api.example.com.
	// +kubebuilder:validation:Required
	identifier?: null | string @go(Identifier,*string)

	// A friendly name for the resource server.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// A list of scopes. Each scope is a key-value map with the keys name and description.
	scopes?: [...null | #ResourceServerScopeType] @go(Scopes,[]*ResourceServerScopeType)

	// The user pool ID for the user pool.
	// +kubebuilder:validation:Required
	userPoolID?: null | string @go(UserPoolID,*string)

	#CustomResourceServerParameters
}

// ResourceServerSpec defines the desired state of ResourceServer
#ResourceServerSpec: {
	xpv1.#ResourceSpec
	forProvider: #ResourceServerParameters @go(ForProvider)
}

// ResourceServerObservation defines the observed state of ResourceServer
#ResourceServerObservation: {
}

// ResourceServerStatus defines the observed state of ResourceServer.
#ResourceServerStatus: {
	xpv1.#ResourceStatus
	atProvider?: #ResourceServerObservation @go(AtProvider)
}

// ResourceServer is the Schema for the ResourceServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResourceServer: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:      #ResourceServerSpec   @go(Spec)
	status?:   #ResourceServerStatus @go(Status)
}

// ResourceServerList contains a list of ResourceServers
#ResourceServerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ResourceServer] @go(Items,[]ResourceServer)
}

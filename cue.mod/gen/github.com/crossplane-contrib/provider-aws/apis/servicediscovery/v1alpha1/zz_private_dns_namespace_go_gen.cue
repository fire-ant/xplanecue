// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/servicediscovery/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PrivateDNSNamespaceParameters defines the desired state of PrivateDNSNamespace
#PrivateDNSNamespaceParameters: {
	// Region is which region the PrivateDNSNamespace will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A description for the namespace.
	description?: null | string @go(Description,*string)

	// The name that you want to assign to this namespace. When you create a private
	// DNS namespace, Cloud Map automatically creates an Amazon Route 53 private
	// hosted zone that has the same name as the namespace.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Properties for the private DNS namespace.
	properties?: null | #PrivateDNSNamespaceProperties @go(Properties,*PrivateDNSNamespaceProperties)

	// The tags to add to the namespace. Each tag consists of a key and an optional
	// value that you define. Tags keys can be up to 128 characters in length, and
	// tag values can be up to 256 characters in length.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomPrivateDNSNamespaceParameters
}

// PrivateDNSNamespaceSpec defines the desired state of PrivateDNSNamespace
#PrivateDNSNamespaceSpec: {
	xpv1.#ResourceSpec
	forProvider: #PrivateDNSNamespaceParameters @go(ForProvider)
}

// PrivateDNSNamespaceObservation defines the observed state of PrivateDNSNamespace
#PrivateDNSNamespaceObservation: {
	// A value that you can use to determine whether the request completed successfully.
	// To get the status of the operation, see GetOperation (https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html).
	operationID?: null | string @go(OperationID,*string)
}

// PrivateDNSNamespaceStatus defines the observed state of PrivateDNSNamespace.
#PrivateDNSNamespaceStatus: {
	xpv1.#ResourceStatus
	atProvider?: #PrivateDNSNamespaceObservation @go(AtProvider)
}

// PrivateDNSNamespace is the Schema for the PrivateDNSNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#PrivateDNSNamespace: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta         @go(ObjectMeta)
	spec:      #PrivateDNSNamespaceSpec   @go(Spec)
	status?:   #PrivateDNSNamespaceStatus @go(Status)
}

// PrivateDNSNamespaceList contains a list of PrivateDNSNamespaces
#PrivateDNSNamespaceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#PrivateDNSNamespace] @go(Items,[]PrivateDNSNamespace)
}

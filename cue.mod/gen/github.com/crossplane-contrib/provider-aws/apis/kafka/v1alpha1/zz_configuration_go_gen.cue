// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/kafka/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ConfigurationParameters defines the desired state of Configuration
#ConfigurationParameters: {
	// Region is which region the Configuration will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The description of the configuration.
	description?: null | string @go(Description,*string)

	// The versions of Apache Kafka with which you can use this MSK configuration.
	kafkaVersions?: [...null | string] @go(KafkaVersions,[]*string)

	#CustomConfigurationParameters
}

// ConfigurationSpec defines the desired state of Configuration
#ConfigurationSpec: {
	xpv1.#ResourceSpec
	forProvider: #ConfigurationParameters @go(ForProvider)
}

// ConfigurationObservation defines the observed state of Configuration
#ConfigurationObservation: {
	// The Amazon Resource Name (ARN) of the configuration.
	arn?: null | string @go(ARN,*string)

	// The time when the configuration was created.
	creationTime?: null | metav1.#Time @go(CreationTime,*metav1.Time)

	// Latest revision of the configuration.
	latestRevision?: null | #ConfigurationRevision @go(LatestRevision,*ConfigurationRevision)

	// The name of the configuration. Configuration names are strings that match
	// the regex "^[0-9A-Za-z-]+$".
	name?: null | string @go(Name,*string)

	// The state of the configuration. The possible states are ACTIVE, DELETING
	// and DELETE_FAILED.
	state?: null | string @go(State,*string)
}

// ConfigurationStatus defines the observed state of Configuration.
#ConfigurationStatus: {
	xpv1.#ResourceStatus
	atProvider?: #ConfigurationObservation @go(AtProvider)
}

// Configuration is the Schema for the Configurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Configuration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta   @go(ObjectMeta)
	spec:      #ConfigurationSpec   @go(Spec)
	status?:   #ConfigurationStatus @go(Status)
}

// ConfigurationList contains a list of Configurations
#ConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Configuration] @go(Items,[]Configuration)
}

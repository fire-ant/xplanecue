// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/athena/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// WorkGroupParameters defines the desired state of WorkGroup
#WorkGroupParameters: {
	// Region is which region the WorkGroup will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The configuration for the workgroup, which includes the location in Amazon
	// S3 where query results are stored, the encryption configuration, if any,
	// used for encrypting query results, whether the Amazon CloudWatch Metrics
	// are enabled for the workgroup, the limit for the amount of bytes scanned
	// (cutoff) per query, if it is specified, and whether workgroup's settings
	// (specified with EnforceWorkGroupConfiguration) in the WorkGroupConfiguration
	// override client-side settings. See WorkGroupConfiguration$EnforceWorkGroupConfiguration.
	configuration?: null | #WorkGroupConfiguration @go(Configuration,*WorkGroupConfiguration)

	// The workgroup description.
	description?: null | string @go(Description,*string)

	// A list of comma separated tags to add to the workgroup that is created.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomWorkGroupParameters
}

// WorkGroupSpec defines the desired state of WorkGroup
#WorkGroupSpec: {
	xpv1.#ResourceSpec
	forProvider: #WorkGroupParameters @go(ForProvider)
}

// WorkGroupObservation defines the observed state of WorkGroup
#WorkGroupObservation: {
}

// WorkGroupStatus defines the observed state of WorkGroup.
#WorkGroupStatus: {
	xpv1.#ResourceStatus
	atProvider?: #WorkGroupObservation @go(AtProvider)
}

// WorkGroup is the Schema for the WorkGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#WorkGroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #WorkGroupSpec     @go(Spec)
	status?:   #WorkGroupStatus   @go(Status)
}

// WorkGroupList contains a list of WorkGroups
#WorkGroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#WorkGroup] @go(Items,[]WorkGroup)
}

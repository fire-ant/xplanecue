// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/apigateway/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// StageParameters defines the desired state of Stage
#StageParameters: {
	// Region is which region the Stage will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// Whether cache clustering is enabled for the stage.
	cacheClusterEnabled?: null | bool @go(CacheClusterEnabled,*bool)

	// The stage's cache cluster size.
	cacheClusterSize?: null | string @go(CacheClusterSize,*string)

	// The description of the Stage resource.
	description?: null | string @go(Description,*string)

	// The version of the associated API documentation.
	documentationVersion?: null | string @go(DocumentationVersion,*string)

	// [Required] The name for the Stage resource. Stage names can only contain
	// alphanumeric characters, hyphens, and underscores. Maximum length is 128
	// characters.
	// +kubebuilder:validation:Required
	stageName?: null | string @go(StageName,*string)

	// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
	// The tag key can be up to 128 characters and must not start with aws:. The
	// tag value can be up to 256 characters.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies whether active tracing with X-ray is enabled for the Stage.
	tracingEnabled?: null | bool @go(TracingEnabled,*bool)

	// A map that defines the stage variables for the new Stage resource. Variable
	// names can have alphanumeric and underscore characters, and the values must
	// match [A-Za-z0-9-._~:/?#&=,]+.
	variables?: {[string]: null | string} @go(Variables,map[string]*string)

	#CustomStageParameters
}

// StageSpec defines the desired state of Stage
#StageSpec: {
	xpv1.#ResourceSpec
	forProvider: #StageParameters @go(ForProvider)
}

// StageObservation defines the observed state of Stage
#StageObservation: {
	// Settings for logging access in this stage.
	accessLogSettings?: null | #AccessLogSettings @go(AccessLogSettings,*AccessLogSettings)

	// The status of the cache cluster for the stage, if enabled.
	cacheClusterStatus?: null | string @go(CacheClusterStatus,*string)

	// Settings for the canary deployment in this stage.
	canarySettings?: null | #CanarySettings @go(CanarySettings,*CanarySettings)

	// The identifier of a client certificate for an API stage.
	clientCertificateID?: null | string @go(ClientCertificateID,*string)

	// The timestamp when the stage was created.
	createdDate?: null | metav1.#Time @go(CreatedDate,*metav1.Time)

	// The identifier of the Deployment that the stage points to.
	deploymentID?: null | string @go(DeploymentID,*string)

	// The timestamp when the stage last updated.
	lastUpdatedDate?: null | metav1.#Time @go(LastUpdatedDate,*metav1.Time)

	// A map that defines the method settings for a Stage resource. Keys (designated
	// as /{method_setting_key below) are method paths defined as {resource_path}/{http_method}
	// for an individual method override, or /\*/\* for overriding all methods in
	// the stage.
	methodSettings?: {[string]: null | #MethodSetting} @go(MethodSettings,map[string]*MethodSetting)

	// The ARN of the WebAcl associated with the Stage.
	webACLARN?: null | string @go(WebACLARN,*string)
}

// StageStatus defines the observed state of Stage.
#StageStatus: {
	xpv1.#ResourceStatus
	atProvider?: #StageObservation @go(AtProvider)
}

// Stage is the Schema for the Stages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Stage: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #StageSpec         @go(Spec)
	status?:   #StageStatus       @go(Status)
}

// StageList contains a list of Stages
#StageList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Stage] @go(Items,[]Stage)
}

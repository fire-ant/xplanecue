// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/efs/v1alpha1

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// ResourceCredentialsSecretIDKey is the name of the key in the connection
// secret for FileSystem ID.
#ResourceCredentialsSecretIDKey: "id"

// CustomAccessPointParameters contains the additional fields for AccessPointParameters.
#CustomAccessPointParameters: {
	// The ID of the file system for which to create the mount target.
	// +immutable
	// +optional
	fileSystemID?: null | string @go(FileSystemID,*string)

	// FileSystemIDRef are references to Filesystem used to set
	// the FileSystemID.
	// +immutable
	// +optional
	fileSystemIDRef?: null | xpv1.#Reference @go(FileSystemIDRef,*xpv1.Reference)

	// FileSystemIDSelector selects references to Filesystem used
	// to set the FileSystemID.
	// +immutable
	// +optional
	fileSystemIDSelector?: null | xpv1.#Selector @go(FileSystemIDSelector,*xpv1.Selector)
}

// CustomFileSystemParameters contains the additional fields for FileSystemParameters.
#CustomFileSystemParameters: {
	// The throughput, measured in MiB/s, that you want to provision for a file
	// system that you're creating. Valid values are 1-1024. Required if ThroughputMode
	// is set to provisioned. The upper limit for throughput is 1024 MiB/s. You
	// can get this limit increased by contacting AWS Support. For more information,
	// see Amazon EFS Limits That You Can Increase (https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits)
	// in the Amazon EFS User Guide.
	// +optional
	provisionedThroughputInMibps?: null | int64 @go(ProvisionedThroughputInMibps,*int64)

	// KMSKeyIDRef is a reference to an Key used to set
	// the KMSKeyID.
	// +optional
	kmsKeyIdRef?: null | xpv1.#Reference @go(KMSKeyIDRef,*xpv1.Reference)

	// KMSKeyIDSelector selects references to Key used
	// to set the KMSKeyID.
	// +optional
	kmsKeyIdSelector?: null | xpv1.#Selector @go(KMSKeyIDSelector,*xpv1.Selector)
}

// CustomMountTargetParameters contains the additional fields for MountTargetParameters.
#CustomMountTargetParameters: {
	// Up to five VPC security group IDs, of the form sg-xxxxxxxx. These must be
	// for the same VPC as subnet specified.
	// +immutable
	// +optional
	securityGroups?: [...string] @go(SecurityGroups,[]string)

	// SecurityGroupIDRefs are references to SecurityGroups used to set
	// the SecurityGroupIDs.
	// +immutable
	// +optional
	securityGroupsRefs?: [...xpv1.#Reference] @go(SecurityGroupsRefs,[]xpv1.Reference)

	// SecurityGroupIDSelector selects references to SecurityGroups used
	// to set the SecurityGroupIDs.
	// +immutable
	// +optional
	securityGroupsSelector?: null | xpv1.#Selector @go(SecurityGroupsSelector,*xpv1.Selector)

	// The ID of the file system for which to create the mount target.
	// +immutable
	// +optional
	fileSystemID?: null | string @go(FileSystemID,*string)

	// FileSystemIDRef are references to Filesystem used to set
	// the FileSystemID.
	// +immutable
	// +optional
	fileSystemIDRef?: null | xpv1.#Reference @go(FileSystemIDRef,*xpv1.Reference)

	// FileSystemIDSelector selects references to Filesystem used
	// to set the FileSystemID.
	// +immutable
	// +optional
	fileSystemIDSelector?: null | xpv1.#Selector @go(FileSystemIDSelector,*xpv1.Selector)

	// The ID of the subnet to add the mount target in.
	// +immutable
	// +optional
	subnetID?: null | string @go(SubnetID,*string)

	// SubnetIDRef are references to Subnet used to set
	// the SubnetID.
	// +immutable
	// +optional
	subnetIDRef?: null | xpv1.#Reference @go(SubnetIDRef,*xpv1.Reference)

	// SubnetIDSelector selects references to Subnet used
	// to set the SubnetID.
	// +immutable
	// +optional
	subnetIDSelector?: null | xpv1.#Selector @go(SubnetIDSelector,*xpv1.Selector)
}

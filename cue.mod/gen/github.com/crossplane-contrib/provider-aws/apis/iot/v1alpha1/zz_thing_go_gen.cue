// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/iot/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ThingParameters defines the desired state of Thing
#ThingParameters: {
	// Region is which region the Thing will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The attribute payload, which consists of up to three name/value pairs in
	// a JSON document. For example:
	//
	// {\"attributes\":{\"string1\":\"string2\"}}
	attributePayload?: null | #AttributePayload @go(AttributePayload,*AttributePayload)

	// The name of the billing group the thing will be added to.
	billingGroupName?: null | string @go(BillingGroupName,*string)

	// The name of the thing type associated with the new thing.
	thingTypeName?: null | string @go(ThingTypeName,*string)

	#CustomThingParameters
}

// ThingSpec defines the desired state of Thing
#ThingSpec: {
	xpv1.#ResourceSpec
	forProvider: #ThingParameters @go(ForProvider)
}

// ThingObservation defines the observed state of Thing
#ThingObservation: {
	// The ARN of the new thing.
	thingARN?: null | string @go(ThingARN,*string)

	// The thing ID.
	thingID?: null | string @go(ThingID,*string)
}

// ThingStatus defines the observed state of Thing.
#ThingStatus: {
	xpv1.#ResourceStatus
	atProvider?: #ThingObservation @go(AtProvider)
}

// Thing is the Schema for the Things API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Thing: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #ThingSpec         @go(Spec)
	status?:   #ThingStatus       @go(Status)
}

// ThingList contains a list of Things
#ThingList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Thing] @go(Items,[]Thing)
}

// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/rds/v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DBInstanceRoleAssociationParameters defines the desired state of DBInstanceRoleAssociation
#DBInstanceRoleAssociationParameters: {
	// Region is which region the DBInstanceRoleAssociation will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The name of the feature for the DB instance that the IAM role is to be associated
	// with. For information about supported feature names, see DBEngineVersion.
	// +kubebuilder:validation:Required
	featureName?: null | string @go(FeatureName,*string)

	#CustomDBInstanceRoleAssociationParameters
}

// DBInstanceRoleAssociationSpec defines the desired state of DBInstanceRoleAssociation
#DBInstanceRoleAssociationSpec: {
	xpv1.#ResourceSpec
	forProvider: #DBInstanceRoleAssociationParameters @go(ForProvider)
}

// DBInstanceRoleAssociationObservation defines the observed state of DBInstanceRoleAssociation
#DBInstanceRoleAssociationObservation: {
}

// DBInstanceRoleAssociationStatus defines the observed state of DBInstanceRoleAssociation.
#DBInstanceRoleAssociationStatus: {
	xpv1.#ResourceStatus
	atProvider?: #DBInstanceRoleAssociationObservation @go(AtProvider)
}

// DBInstanceRoleAssociation is the Schema for the DBInstanceRoleAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DBInstanceRoleAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta               @go(ObjectMeta)
	spec:      #DBInstanceRoleAssociationSpec   @go(Spec)
	status?:   #DBInstanceRoleAssociationStatus @go(Status)
}

// DBInstanceRoleAssociationList contains a list of DBInstanceRoleAssociations
#DBInstanceRoleAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DBInstanceRoleAssociation] @go(Items,[]DBInstanceRoleAssociation)
}

// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/rds/v1alpha1

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// CustomDBParameterGroupParameters are custom parameters for DBParameterGroup
#CustomDBParameterGroupParameters: {
	// A list of parameters to associate with this DB parameter group
	// +optional
	parameters?: [...#Parameter] @go(Parameters,[]Parameter)

	// The DB parameter group family name. A DB parameter group can be associated
	// with one and only one DB parameter group family, and can be applied only
	// to a DB instance running a database engine and engine version compatible
	// with that DB parameter group family.
	//
	// To list all of the available parameter group families for a DB engine, use
	// the following command:
	//
	// aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"
	// --engine <engine>
	//
	// For example, to list all of the available parameter group families for the
	// MySQL DB engine, use the following command:
	//
	// aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"
	// --engine mysql
	//
	// The output contains duplicates.
	//
	// The following are the valid DB engine values:
	//
	//    * aurora (for MySQL 5.6-compatible Aurora)
	//
	//    * aurora-mysql (for MySQL 5.7-compatible Aurora)
	//
	//    * aurora-postgresql
	//
	//    * mariadb
	//
	//    * mysql
	//
	//    * oracle-ee
	//
	//    * oracle-ee-cdb
	//
	//    * oracle-se2
	//
	//    * oracle-se2-cdb
	//
	//    * postgres
	//
	//    * sqlserver-ee
	//
	//    * sqlserver-se
	//
	//    * sqlserver-ex
	//
	//    * sqlserver-web
	//
	// One of DBParameterGroupFamily or DBParameterGroupFamilySelector is required.
	//
	// +optional
	dbParameterGroupFamily?: null | string @go(DBParameterGroupFamily,*string)

	// DBParameterGroupFamilySelector determines DBParameterGroupFamily from
	// the engine and engine version.
	//
	// One of DBParameterGroupFamily or DBParameterGroupFamilySelector is required.
	//
	// Will not be used if DBParameterGroupFamily is already set.
	// +optional
	dbParameterGroupFamilySelector?: null | #DBParameterGroupFamilyNameSelector @go(DBParameterGroupFamilySelector,*DBParameterGroupFamilyNameSelector)
}

// CustomDBClusterParameterGroupParameters are custom parameters for DBClusterParameterGroup
#CustomDBClusterParameterGroupParameters: {
	// A list of parameters to associate with this DB cluster parameter group
	// +optional
	parameters?: [...#Parameter] @go(Parameters,[]Parameter)

	// The DB cluster parameter group family name. A DB cluster parameter group
	// can be associated with one and only one DB cluster parameter group family,
	// and can be applied only to a DB cluster running a database engine and engine
	// version compatible with that DB cluster parameter group family.
	//
	// Aurora MySQL
	//
	// Example: aurora5.6, aurora-mysql5.7
	//
	// Aurora PostgreSQL
	//
	// Example: aurora-postgresql9.6
	//
	// To list all of the available parameter group families for a DB engine, use
	// the following command:
	//
	// aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"
	// --engine <engine>
	//
	// For example, to list all of the available parameter group families for the
	// Aurora PostgreSQL DB engine, use the following command:
	//
	// aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"
	// --engine aurora-postgresql
	//
	// The output contains duplicates.
	//
	// The following are the valid DB engine values:
	//
	//    * aurora (for MySQL 5.6-compatible Aurora)
	//
	//    * aurora-mysql (for MySQL 5.7-compatible Aurora)
	//
	//    * aurora-postgresql
	//
	// One of DBParameterGroupFamily or DBParameterGroupFamilySelector is required.
	//
	// +optional
	dbParameterGroupFamily?: null | string @go(DBParameterGroupFamily,*string)

	// DBParameterGroupFamilySelector determines DBParameterGroupFamily from
	// the engine and engine version.
	//
	// One of DBParameterGroupFamily or DBParameterGroupFamilySelector is required.
	//
	// Will not be used if DBParameterGroupFamily is already set.
	// +optional
	dbParameterGroupFamilySelector?: null | #DBParameterGroupFamilyNameSelector @go(DBParameterGroupFamilySelector,*DBParameterGroupFamilyNameSelector)
}

// DBParameterGroupFamilyNameSelector allows determining the family name from the
// database engine and engine version.
#DBParameterGroupFamilyNameSelector: {
	// Engine is the name of the database engine.
	// +kubebuilder:validation:Required
	engine: string @go(Engine)

	// EngineVersion is the version of the database engine.
	// If it is nil, the default engine version given by AWS will be used.
	// +optional
	engineVersion?: null | string @go(EngineVersion,*string)
}

// CustomDBClusterParameters are custom parameters for DBCluster
#CustomDBClusterParameters: {
	// AutogeneratePassword indicates whether the controller should generate
	// a random password for the master user if one is not provided via
	// MasterUserPasswordSecretRef.
	//
	// If a password is generated, it will
	// be stored as a secret at the location specified by MasterUserPasswordSecretRef.
	// +optional
	autogeneratePassword?: bool @go(AutogeneratePassword)

	// DomainIAMRoleNameRef is a reference to an IAMRole used to set
	// DomainIAMRoleName.
	// +optional
	domainIAMRoleNameRef?: null | xpv1.#Reference @go(DomainIAMRoleNameRef,*xpv1.Reference)

	// DomainIAMRoleNameSelector selects a reference to an IAMRole used to set
	// DomainIAMRoleName.
	// +optional
	domainIAMRoleNameSelector?: null | xpv1.#Selector @go(DomainIAMRoleNameSelector,*xpv1.Selector)

	// KMSKeyIDRef is a reference to a KMS Key used to set KMSKeyID.
	// +optional
	kmsKeyIDRef?: null | xpv1.#Reference @go(KMSKeyIDRef,*xpv1.Reference)

	// KMSKeyIDSelector selects a reference to a KMS Key used to set KMSKeyID.
	// +optional
	kmsKeyIDSelector?: null | xpv1.#Selector @go(KMSKeyIDSelector,*xpv1.Selector)

	// The password for the master database user. This password can contain any
	// printable ASCII character except "/", """, or "@".
	//
	// Constraints: Must contain from 8 to 41 characters. Required.
	masterUserPasswordSecretRef?: null | xpv1.#SecretKeySelector @go(MasterUserPasswordSecretRef,*xpv1.SecretKeySelector)

	// A list of EC2 VPC security groups to associate with this DB cluster.
	vpcSecurityGroupIDs?: [...string] @go(VPCSecurityGroupIDs,[]string)

	// VPCSecurityGroupIDRefs are references to VPCSecurityGroups used to set
	// the VPCSecurityGroupIDs.
	// +optional
	vpcSecurityGroupIDRefs?: [...xpv1.#Reference] @go(VPCSecurityGroupIDRefs,[]xpv1.Reference)

	// VPCSecurityGroupIDSelector selects references to VPCSecurityGroups used
	// to set the VPCSecurityGroupIDs.
	// +optional
	vpcSecurityGroupIDSelector?: null | xpv1.#Selector @go(VPCSecurityGroupIDSelector,*xpv1.Selector)

	// DBSubnetGroupNameRef is a reference to a DBSubnetGroup used to set
	// DBSubnetGroupName.
	// +immutable
	// +optional
	dbSubnetGroupNameRef?: null | xpv1.#Reference @go(DBSubnetGroupNameRef,*xpv1.Reference)

	// DBSubnetGroupNameSelector selects a reference to a DBSubnetGroup used to
	// set DBSubnetGroupName.
	// +immutable
	// +optional
	dbSubnetGroupNameSelector?: null | xpv1.#Selector @go(DBSubnetGroupNameSelector,*xpv1.Selector)

	// The DB cluster snapshot identifier of the new DB cluster snapshot created
	// when SkipFinalSnapshot is disabled.
	//
	// Specifying this parameter and also skipping the creation of a final DB cluster
	// snapshot with the SkipFinalShapshot parameter results in an error.
	//
	// Constraints:
	//
	//    * Must be 1 to 255 letters, numbers, or hyphens.
	//
	//    * First character must be a letter
	//
	//    * Can't end with a hyphen or contain two consecutive hyphens
	// +immutable
	// +optional
	finalDBSnapshotIdentifier?: string @go(FinalDBSnapshotIdentifier)

	// A value that indicates whether to skip the creation of a final DB cluster
	// snapshot before the DB cluster is deleted. If skip is specified, no DB cluster
	// snapshot is created. If skip isn't specified, a DB cluster snapshot is created
	// before the DB cluster is deleted. By default, skip isn't specified, and the
	// DB cluster snapshot is created. By default, this parameter is disabled.
	//
	// You must specify a FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot
	// is disabled.
	// +immutable
	// +optional
	skipFinalSnapshot?: bool @go(SkipFinalSnapshot)

	// DBClusterParameterGroupNameRef is a reference to a DBClusterParameterGroup used to set
	// DBClusterParameterGroupName.
	// +optional
	dbClusterParameterGroupNameRef?: null | xpv1.#Reference @go(DBClusterParameterGroupNameRef,*xpv1.Reference)

	// DBClusterParameterGroupNameSelector selects a reference to a DBClusterParameterGroup used to
	// set DBClusterParameterGroupName.
	// +optional
	dbClusterParameterGroupNameSelector?: null | xpv1.#Selector @go(DBClusterParameterGroupNameSelector,*xpv1.Selector)

	// A value that indicates whether the modifications in this request and any
	// pending modifications are asynchronously applied as soon as possible, regardless
	// of the PreferredMaintenanceWindow setting for the DB cluster. If this parameter
	// is disabled, changes to the DB cluster are applied during the next maintenance
	// window.
	//
	// The ApplyImmediately parameter only affects the EnableIAMDatabaseAuthentication,
	// MasterUserPassword values. If the ApplyImmediately
	// parameter is disabled, then changes to the EnableIAMDatabaseAuthentication,
	// MasterUserPassword values are applied during
	// the next maintenance window. All other changes are applied immediately, regardless
	// of the value of the ApplyImmediately parameter.
	//
	// By default, this parameter is disabled.
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// RestoreFrom specifies the details of the backup to restore when creating a new DBCluster.
	// +optional
	restoreFrom?: null | #RestoreBackupConfiguration @go(RestoreFrom,*RestoreBackupConfiguration)
}

// S3RestoreBackupConfiguration defines the details of the S3 backup to restore from.
#S3RestoreBackupConfiguration: {
	// BucketName is the name of the S3 bucket containing the backup to restore.
	bucketName?: null | string @go(BucketName,*string)

	// IngestionRoleARN is the IAM role RDS can assume that will allow it to access the contents of the S3 bucket.
	ingestionRoleARN?: null | string @go(IngestionRoleARN,*string)

	// Prefix is the path prefix of the S3 bucket within which the backup to restore is located.
	// +optional
	prefix?: null | string @go(Prefix,*string)

	// SourceEngine is the engine used to create the backup.
	// Must be "mysql".
	sourceEngine?: null | string @go(SourceEngine,*string)

	// SourceEngineVersion is the version of the engine used to create the backup.
	// Example: "5.7.30"
	sourceEngineVersion?: null | string @go(SourceEngineVersion,*string)
}

// SnapshotRestoreBackupConfiguration defines the details of the snapshot to restore from.
#SnapshotRestoreBackupConfiguration: {
	// SnapshotIdentifier is the identifier of the snapshot to restore.
	snapshotIdentifier?: null | string @go(SnapshotIdentifier,*string)
}

// RestoreBackupConfiguration defines the backup to restore a new DBCluster from.
#RestoreBackupConfiguration: {
	// S3 specifies the details of the S3 backup to restore from.
	// +optional
	s3?: null | #S3RestoreBackupConfiguration @go(S3,*S3RestoreBackupConfiguration)

	// Snapshot specifies the details of the snapshot to restore from.
	// +optional
	snapshot?: null | #SnapshotRestoreBackupConfiguration @go(Snapshot,*SnapshotRestoreBackupConfiguration)

	// Source is the type of the backup to restore when creating a new DBCluster.
	// Only S3 and Snapshot are supported at present.
	source?: null | string @go(Source,*string)
}

// CustomGlobalClusterParameters are custom parameters for a GlobalCluster
#CustomGlobalClusterParameters: {
	// SourceDBClusterIdentifierRef is a reference to a DBCluster used to set
	// SourceDBClusterIdentifier.
	// +immutable
	// +optional
	sourceDBClusterIdentifierRef?: null | xpv1.#Reference @go(SourceDBClusterIdentifierRef,*xpv1.Reference)

	// SourceDBClusterIdentifierSelector selects a reference to a DBCluster used to
	// set SourceDBClusterIdentifier.
	// +immutable
	// +optional
	sourceDBClusterIdentifierSelector?: null | xpv1.#Selector @go(SourceDBClusterIdentifierSelector,*xpv1.Selector)
}

// CustomDBInstanceParameters are custom parameters for the DBInstance
#CustomDBInstanceParameters: {
	// AutogeneratePassword indicates whether the controller should generate
	// a random password for the master user if one is not provided via
	// MasterUserPasswordSecretRef.
	//
	// If a password is generated, it will
	// be stored as a secret at the location specified by MasterUserPasswordSecretRef.
	// +optional
	autogeneratePassword?: bool @go(AutogeneratePassword)

	// DBClusterIdentifierRef is a reference to a DBCluster used to set
	// DBClusterIdentifier.
	// +immutable
	// +optional
	dbClusterIdentifierRef?: null | xpv1.#Reference @go(DBClusterIdentifierRef,*xpv1.Reference)

	// DBClusterIdentifierSelector selects a reference to a DBCluster used to
	// set DBClusterIdentifier.
	// +immutable
	// +optional
	dbClusterIdentifierSelector?: null | xpv1.#Selector @go(DBClusterIdentifierSelector,*xpv1.Selector)

	// A list of database security groups to associate with this DB instance
	dbSecurityGroups?: [...string] @go(DBSecurityGroups,[]string)

	// DBSubnetGroupNameRef is a reference to a DBSubnetGroup used to set
	// DBSubnetGroupName.
	// +immutable
	// +optional
	dbSubnetGroupNameRef?: null | xpv1.#Reference @go(DBSubnetGroupNameRef,*xpv1.Reference)

	// DBSubnetGroupNameSelector selects a reference to a DBSubnetGroup used to
	// set DBSubnetGroupName.
	// +immutable
	// +optional
	dbSubnetGroupNameSelector?: null | xpv1.#Selector @go(DBSubnetGroupNameSelector,*xpv1.Selector)

	// DomainIAMRoleNameRef is a reference to an IAMRole used to set
	// DomainIAMRoleName.
	// +optional
	// +immutable
	domainIAMRoleNameRef?: null | xpv1.#Reference @go(DomainIAMRoleNameRef,*xpv1.Reference)

	// DomainIAMRoleNameSelector selects a reference to an IAMRole used to set
	// DomainIAMRoleName.
	// +optional
	// +immutable
	domainIAMRoleNameSelector?: null | xpv1.#Selector @go(DomainIAMRoleNameSelector,*xpv1.Selector)

	// The DB instance snapshot identifier of the new DB instance snapshot created
	// when SkipFinalSnapshot is disabled.
	//
	// Specifying this parameter and also skipping the creation of a final DB instance
	// snapshot with the SkipFinalShapshot parameter results in an error.
	//
	// Constraints:
	//
	//    * Must be 1 to 255 letters, numbers, or hyphens.
	//
	//    * First character must be a letter
	//
	//    * Can't end with a hyphen or contain two consecutive hyphens
	// +immutable
	// +optional
	finalDBSnapshotIdentifier?: string @go(FinalDBSnapshotIdentifier)

	// The password for the master database user. This password can contain any
	// printable ASCII character except "/", """, or "@".
	//
	// Constraints: Must contain from 8 to 41 characters.
	// +optional
	masterUserPasswordSecretRef?: null | xpv1.#SecretKeySelector @go(MasterUserPasswordSecretRef,*xpv1.SecretKeySelector)

	// MonitoringRoleARNRef is a reference to an IAMRole used to set
	// MonitoringRoleARN.
	// +optional
	// +immutable
	monitoringRoleArnRef?: null | xpv1.#Reference @go(MonitoringRoleARNRef,*xpv1.Reference)

	// MonitoringRoleARNSelector selects a reference to an IAMRole used to set
	// MonitoringRoleARN.
	// +optional
	// +immutable
	monitoringRoleArnSelector?: null | xpv1.#Selector @go(MonitoringRoleARNSelector,*xpv1.Selector)

	// A value that indicates whether to skip the creation of a final DB instance
	// snapshot before the DB instance is deleted. If skip is specified, no DB instance
	// snapshot is created. If skip isn't specified, a DB instance snapshot is created
	// before the DB instance is deleted. By default, skip isn't specified, and the
	// DB instance snapshot is created. By default, this parameter is disabled.
	//
	// You must specify a FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot
	// is disabled.
	// +immutable
	// +optional
	skipFinalSnapshot?: bool @go(SkipFinalSnapshot)

	// A list of EC2 VPC security groups to associate with this DB instance.
	vpcSecurityGroupIDs?: [...string] @go(VPCSecurityGroupIDs,[]string)

	// VPCSecurityGroupIDRefs are references to VPCSecurityGroups used to set
	// the VPCSecurityGroupIDs.
	// +optional
	vpcSecurityGroupIDRefs?: [...xpv1.#Reference] @go(VPCSecurityGroupIDRefs,[]xpv1.Reference)

	// VPCSecurityGroupIDSelector selects references to VPCSecurityGroups used
	// to set the VPCSecurityGroupIDs.
	// +optional
	vpcSecurityGroupIDSelector?: null | xpv1.#Selector @go(VPCSecurityGroupIDSelector,*xpv1.Selector)

	// DBParameterGroupNameRef is a reference to a DBParameterGroup used to set
	// DBParameterGroupName.
	// +optional
	dbParameterGroupNameRef?: null | xpv1.#Reference @go(DBParameterGroupNameRef,*xpv1.Reference)

	// DBParameterGroupNameSelector selects a reference to a DBParameterGroup used to
	// set DBParameterGroupName.
	// +optional
	dbParameterGroupNameSelector?: null | xpv1.#Selector @go(DBParameterGroupNameSelector,*xpv1.Selector)

	// A value that indicates whether the modifications in this request and any
	// pending modifications are asynchronously applied as soon as possible, regardless
	// of the PreferredMaintenanceWindow setting for the DB instance. By default,
	// this parameter is disabled.
	//
	// If this parameter is disabled, changes to the DB instance are applied during
	// the next maintenance window. Some parameter changes can cause an outage and
	// are applied on the next call to RebootDBInstance, or the next failure reboot.
	// Review the table of parameters in Modifying a DB Instance (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html)
	// in the Amazon RDS User Guide. to see the impact of enabling or disabling
	// ApplyImmediately for each modified parameter and to determine when the changes
	// are applied.
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// KMSKeyIDRef is a reference to a KMS Key used to set KMSKeyID.
	// +optional
	kmsKeyIDRef?: null | xpv1.#Reference @go(KMSKeyIDRef,*xpv1.Reference)

	// KMSKeyIDSelector selects a reference to a KMS Key used to set KMSKeyID.
	// +optional
	kmsKeyIDSelector?: null | xpv1.#Selector @go(KMSKeyIDSelector,*xpv1.Selector)
}

// CustomDBInstanceRoleAssociationParameters are custom parameters for the DBInstanceRoleAssociation
#CustomDBInstanceRoleAssociationParameters: {
	// The name of the DB instance to associate the IAM role with.
	// +crossplane:generate:reference:type=DBInstance
	// +optional
	dbInstanceIdentifier?: null | string @go(DBInstanceIdentifier,*string)

	// DBInstanceIdentifierRef is a reference to a DBInstance used to set
	// the DBInstanceIdentifier.
	// +optional
	dbInstanceIdentifierRef?: null | xpv1.#Reference @go(DBInstanceIdentifierRef,*xpv1.Reference)

	// DBInstanceIdentifierSelector selects references to a DBInstance used
	// to set the DBInstanceIdentifier.
	// +optional
	dbInstanceIdentifierSelector?: null | xpv1.#Selector @go(DBInstanceIdentifierSelector,*xpv1.Selector)

	// The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance,
	// for example arn:aws:iam::123456789012:role/AccessRole.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1.RoleARN()
	// +optional
	roleArn?: null | string @go(RoleARN,*string)

	// RoleARNRef is a reference to a IAM Role used to set
	// RoleARN.
	// +optional
	roleArnRef?: null | xpv1.#Reference @go(RoleARNRef,*xpv1.Reference)

	// RoleARNSelector selects a reference to a IAM Role used to
	// set RoleARN.
	// +optional
	roleArnSelector?: null | xpv1.#Selector @go(RoleARNSelector,*xpv1.Selector)
}

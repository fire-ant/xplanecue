// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/route53resolver/manualv1alpha1

package manualv1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

#ResolverRuleAssociationStatusCreating:   "CREATING"
#ResolverRuleAssociationStatusComplete:   "COMPLETE"
#ResolverRuleAssociationStatusDeleting:   "DELETING"
#ResolverRuleAssociationStatusFailed:     "FAILED"
#ResolverRuleAssociationStatusOverridden: "OVERRIDDEN"

// ResolverRuleAssociation is a managed resource that represents an AWS Route53 ResolverRuleAssociation.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResolverRuleAssociation: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta             @go(ObjectMeta)
	spec:      #ResolverRuleAssociationSpec   @go(Spec)
	status?:   #ResolverRuleAssociationStatus @go(Status)
}

// ResolverRuleAssociationSpec defines the desired state of an AWS Route53 Hosted ResolverRuleAssociation.
#ResolverRuleAssociationSpec: {
	xpv1.#ResourceSpec
	forProvider: #ResolverRuleAssociationParameters @go(ForProvider)
}

// ResolverRuleAssociationStatus represents the observed state of a ResolverRuleAssociation.
#ResolverRuleAssociationStatus: {
	xpv1.#ResourceStatus
	atProvider?: #ResolverRuleAssociationObservation @go(AtProvider)
}

// ResolverRuleAssociationParameters define the desired state of an AWS Route53 Hosted ResolverRuleAssociation.
#ResolverRuleAssociationParameters: {
	// Region is which region the Addon will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The ID of the Resolver rule that you want to associate with the VPC. To list
	// the existing Resolver rules, use ListResolverRules (https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html).
	//
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/route53resolver/v1alpha1.ResolverRule
	// +optional
	resolverRuleId?: null | string @go(ResolverRuleID,*string)

	// ResolverRuleIDRef is a reference to a ResolverRule used to set
	// the ResolverRuleID.
	// +immutable
	// +optional
	resolverRuleIdRef?: null | xpv1.#Reference @go(ResolverRuleIDRef,*xpv1.Reference)

	// ResolverRuleIDSelector selects references to a ResolverRule used
	// to set the ResolverRuleID.
	// +immutable
	// +optional
	resolverRuleIdSelector?: null | xpv1.#Selector @go(ResolverRuleIDSelector,*xpv1.Selector)

	// The ID of the VPC that you want to associate the Resolver rule with.
	//
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1.VPC
	// +optional
	vpcId?: null | string @go(VPCId,*string)

	// VPCIdRef is a reference to a VPC used to set
	// the VPCId.
	// +immutable
	// +optional
	vpcIdRef?: null | xpv1.#Reference @go(VPCIdRef,*xpv1.Reference)

	// VPCIdSelector selects references to a VPC used
	// to set the VPCId.
	// +immutable
	// +optional
	vpcIdSelector?: null | xpv1.#Selector @go(VPCIdSelector,*xpv1.Selector)
}

// ResolverRuleAssociationObservation keeps the state for the external resource.
#ResolverRuleAssociationObservation: {
}

// ResolverRuleAssociationList contains a list of ResolverRuleAssociation.
#ResolverRuleAssociationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ResolverRuleAssociation] @go(Items,[]ResolverRuleAssociation)
}

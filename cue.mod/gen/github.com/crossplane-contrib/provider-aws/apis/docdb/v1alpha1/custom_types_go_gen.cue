// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/docdb/v1alpha1

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// The instance is healthy and available
#DocDBInstanceStateAvailable: "available"

// The instance is being created. The instance is inaccessible while it is being created.
#DocDBInstanceStateCreating: "creating"

// The instance is being deleted.
#DocDBInstanceStateDeleting: "deleting"

// The instance is being modified.
#DocDBInstanceStateModifying: "modifying"

// The instance has failed and Amazon RDS can't recover it. Perform a point-in-time restore to the latest restorable time of the instance to recover the data.
#DocDBInstanceStateFailed: "failed"

// CustomDBInstanceParameters for DBInstance
#CustomDBInstanceParameters: {
	// Specifies whether the modifications in this request and any pending modifications
	// are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow
	// setting for the instance.
	//
	// If this parameter is set to false, changes to the instance are applied during
	// the next maintenance window. Some parameter changes can cause an outage and
	// are applied on the next reboot.
	//
	// Default: false
	// +optional
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// The identifier of the CA certificate for this DB instance.
	// +optional
	caCertificateIdentifier?: null | string @go(CACertificateIdentifier,*string)

	// The identifier of the cluster this instance will belong to
	dbClusterIdentifier?:         null | string          @go(DBClusterIdentifier,*string)
	dbClusterIdentifierRef?:      null | xpv1.#Reference @go(DBClusterIdentifierRef,*xpv1.Reference)
	dbClusterIdentifierSelector?: null | xpv1.#Selector  @go(DBClusterIdentifierSelector,*xpv1.Selector)
}

// CustomDBSubnetGroupParameters for DBSubnetGroupParameters
#CustomDBSubnetGroupParameters: {
	subnetIDs?: [...null | string] @go(SubnetIDs,[]*string)

	// TODO(haarchri): when resource is bumped to beta we will convert this field to subnetIdRefs
	subnetIDsRefs?: [...xpv1.#Reference] @go(SubnetIDsRefs,[]xpv1.Reference)

	// TODO(haarchri): when resource is bumped to beta we will convert this field to subnetIdSelector
	subnetIDsSelector?: null | xpv1.#Selector @go(SUbnetIDsSelector,*xpv1.Selector)
}

// CustomDBClusterParameterGroupParameters for DBClusterParameterGroup
#CustomDBClusterParameterGroupParameters: {
	parameters?: [...null | #Parameter] @go(Parameters,[]*Parameter)
}

// CustomDBClusterParameters for DBCluster
#CustomDBClusterParameters: {
	// A value that specifies whether the changes in this request and any pending
	// changes are asynchronously applied as soon as possible, regardless of the
	// PreferredMaintenanceWindow setting for the cluster. If this parameter is
	// set to false, changes to the cluster are applied during the next maintenance
	// window.
	//
	// The ApplyImmediately parameter affects only the NewDBClusterIdentifier and
	// MasterUserPassword values. If you set this parameter value to false, the
	// changes to the NewDBClusterIdentifier and MasterUserPassword values are applied
	// during the next maintenance window. All other changes are applied immediately,
	// regardless of the value of the ApplyImmediately parameter.
	//
	// Default: false
	// +optional
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// Determines whether a final cluster snapshot is created before the cluster
	// is deleted. If true is specified, no cluster snapshot is created. If false
	// is specified, a cluster snapshot is created before the DB cluster is deleted.
	//
	// If SkipFinalSnapshot is false, you must specify a FinalDBSnapshotIdentifier
	// parameter.
	//
	// Default: false
	// +optional
	skipFinalSnapshot?: null | bool @go(SkipFinalSnapshot,*bool)

	// The cluster snapshot identifier of the new cluster snapshot created when
	// SkipFinalSnapshot is set to false.
	//
	// Specifying this parameter and also setting the SkipFinalShapshot parameter
	// to true results in an error.
	//
	// Constraints:
	//
	//    * Must be from 1 to 255 letters, numbers, or hyphens.
	//
	//    * The first character must be a letter.
	//
	//    * Cannot end with a hyphen or contain two consecutive hyphens.
	// +optional
	finalDBSnapshotIdentifier?: null | string @go(FinalDBSnapshotIdentifier,*string)

	// MasterUserPasswordSecretRef references the secret that contains the password for the master database user. This password can contain any
	// printable ASCII character except forward slash (/), double quote ("), or
	// the "at" symbol (@).
	//
	// Constraints: Must contain from 8 to 100 characters.
	masterUserPasswordSecretRef?:         null | xpv1.#SecretKeySelector @go(MasterUserPasswordSecretRef,*xpv1.SecretKeySelector)
	dbSubnetGroupNameRef?:                null | xpv1.#Reference         @go(DBSubnetGroupNameRef,*xpv1.Reference)
	dbSubnetGroupNameSelector?:           null | xpv1.#Selector          @go(DBSubnetGroupNameSelector,*xpv1.Selector)
	dbClusterParameterGroupNameRef?:      null | xpv1.#Reference         @go(DBClusterParameterGroupNameRef,*xpv1.Reference)
	dbClusterParameterGroupNameSelector?: null | xpv1.#Selector          @go(DBClusterParameterGroupNameSelector,*xpv1.Selector)

	// TODO(haarchri): when resource is bumped to beta we will convert this field to kmsKeyIdRef
	kmsKeyIDRef?: null | xpv1.#Reference @go(KMSKeyIDRef,*xpv1.Reference)

	// TODO(haarchri): when resource is bumped to beta we will convert this field to kmsKeyIdSelector
	kmsKeyIDSelector?: null | xpv1.#Selector @go(KMSKeyIDSelector,*xpv1.Selector)

	// TODO(haarchri): when resource is bumped to beta we will convert this field to vpcSecurityGroupIdRefs
	vpcSecurityGroupIDsRefs?: [...xpv1.#Reference] @go(VPCSecurityGroupIDsRefs,[]xpv1.Reference)

	// TODO(haarchri): when resource is bumped to beta we will convert this field to vpcSecurityGroupIdSelector
	vpcSecurityGroupIDsSelector?: null | xpv1.#Selector @go(VPCSecurityGroupIDsSelector,*xpv1.Selector)
}
